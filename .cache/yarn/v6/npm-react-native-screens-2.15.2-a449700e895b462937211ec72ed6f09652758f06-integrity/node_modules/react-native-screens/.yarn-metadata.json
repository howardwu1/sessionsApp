{
  "manifest": {
    "name": "react-native-screens",
    "version": "2.15.2",
    "description": "Native navigation primitives for your React Native app.",
    "scripts": {
      "check-types": "tsc --noEmit",
      "start": "react-native start",
      "test": "yarn format && yarn lint && yarn test:unit",
      "test:unit": "jest --passWithNoTests",
      "format": "prettier --write --list-different './src/**/*.{js,ts,tsx}'",
      "lint": "eslint --ext '.js,.ts,.tsx' --fix src && npm run check-types",
      "precommit": "yarn test",
      "release": "npm login && release-it",
      "prepare": "bob build"
    },
    "main": "lib/commonjs/index",
    "module": "lib/module/index",
    "react-native": "src/index",
    "source": "src/index",
    "types": "src/index.d.ts",
    "files": [
      "src/",
      "lib/",
      "native-stack/",
      "createNativeStackNavigator/",
      "android/src/main/AndroidManifest.xml",
      "android/src/main/java/",
      "android/build.gradle",
      "ios/",
      "RNScreens.podspec",
      "README.md",
      "!**/__tests__"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/kmagiera/react-native-screens.git"
    },
    "author": {
      "name": "Krzysztof Magiera",
      "email": "krzys.magiera@gmail.com"
    },
    "license": "MIT",
    "readmeFilename": "README.md",
    "bugs": {
      "url": "https://github.com/kmagiera/react-native-screens/issues"
    },
    "homepage": "https://github.com/kmagiera/react-native-screens#readme",
    "peerDependencies": {
      "react": "*",
      "react-native": "*"
    },
    "devDependencies": {
      "@babel/core": "^7.11.0",
      "@react-native-community/bob": "^0.15.1",
      "@react-navigation/native": "^5.8.0",
      "@react-navigation/stack": "^5.10.0",
      "@types/jest": "^26.0.8",
      "@types/react": "^16.9.44",
      "@types/react-native": "^0.63.2",
      "@types/react-test-renderer": "^16.9.2",
      "@typescript-eslint/eslint-plugin": "^3.7.1",
      "@typescript-eslint/parser": "^3.7.1",
      "babel-eslint": "^10.1.0",
      "babel-jest": "^26.2.2",
      "eslint": "^7.6.0",
      "eslint-config-prettier": "^6.11.0",
      "eslint-config-standard": "^14.1.1",
      "eslint-plugin-import": "^2.22.0",
      "eslint-plugin-jest": "^23.20.0",
      "eslint-plugin-node": "^11.1.0",
      "eslint-plugin-promise": "^4.2.1",
      "eslint-plugin-react": "^7.20.5",
      "eslint-plugin-react-native": "^3.2.1",
      "eslint-plugin-standard": "^4.0.1",
      "husky": "^0.14.3",
      "jest": "^26.2.2",
      "jest-react-native": "18.0.0",
      "lint-staged": "^7.1.3",
      "metro-react-native-babel-preset": "^0.61.0",
      "prettier": "^2.0.4",
      "react": "^16.13.1",
      "react-dom": "^16.13.1",
      "react-native": "^0.63.2",
      "react-navigation": "^4.4.3",
      "react-navigation-stack": "^2.9.0",
      "react-test-renderer": "^16.13.1",
      "release-it": "^13.5.2",
      "typescript": "^3.9.7"
    },
    "lint-staged": {
      "*.{js,ts,tsx}": [
        "prettier --write",
        "git add"
      ]
    },
    "@react-native-community/bob": {
      "source": "src",
      "output": "lib",
      "targets": [
        "commonjs",
        "module",
        "typescript"
      ]
    },
    "eslintIgnore": [
      "node_modules/",
      "lib/"
    ],
    "_registry": "npm",
    "_loc": "/home/howard/.cache/yarn/v6/npm-react-native-screens-2.15.2-a449700e895b462937211ec72ed6f09652758f06-integrity/node_modules/react-native-screens/package.json",
    "readme": "# react-native-screens\n\nThis project aims to expose native navigation container components to React Native. It is not designed to be used as a standalone library but rather as a dependency of a [full-featured navigation library](https://github.com/react-navigation/react-navigation).\n\n## Installation\n\n### iOS\n\nInstallation on iOS should be completely handled with auto-linking, if you have insured pods are installed after adding this module, no other actions should be necessary\n\n### Android\n\nOn Android the View state is not persisted consistently across Activity restarts, which can lead to crashes in those cases. It is recommended to override the native Android method called on Activity restarts in your main Activity, to avoid these crashes.\n\nFor most people using an app built from the react-native template, that means editing `MainActivity.java`, likely located in `android/app/src/main/java/<your package name>/MainActivity.java`\n\nYou should add this code, which specifically discards any Activity state persisted during the Activity restart process, to avoid inconsistencies that lead to crashes.\n\n```java\nimport android.os.Bundle;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(null);\n}\n```\n\nFor people that must handle cases like this, there is [a more detailed discussion of the difficulties in a series of related comments](https://github.com/software-mansion/react-native-screens/issues/17#issuecomment-424704633).\n\n## How can I take advantage of that?\n\nScreens are already integrated with the React Native's most popular navigation library [react-navigation](https://github.com/react-navigation/react-navigation) and [Expo](https://expo.io).\nRead usage guide depending on if you are [using Expo](#usage-in-expo-with-react-navigation) or [not](#usage-with-react-navigation-without-expo).\n\n## Supported react-native version\n\nSince version 2.0.0 react-native-screens requires RN v0.60+.\n\n## Usage with [react-navigation](https://github.com/react-navigation/react-navigation)\n\nScreens support is built into [react-navigation](https://github.com/react-navigation/react-navigation) starting from version [2.14.0](https://github.com/react-navigation/react-navigation/releases/tag/2.14.0) for all the different navigator types (stack, tab, drawer, etc). We plan on adding it to other navigators shortly.\n\nTo configure react-navigation to use screens instead of plain RN Views for rendering screen views, follow the steps below:\n\n1.  Add this library as a dependency to your project:\n\n```bash\n# bare React Native project\nyarn add react-native-screens\n\n# if you use Expo managed workflow\nexpo install react-native-screens\n```\n\n2.  Enable screens support before any of your navigation screens renders. Add the following code to your main application file (e.g. App.js):\n\n```js\nimport { enableScreens } from 'react-native-screens';\n\nenableScreens();\n```\n\nNote that the above code needs to execute before the first render of a navigation screen. You can check the Example's app [App.js](https://github.com/kmagiera/react-native-screens/blob/master/Example/App.js#L16) file as a reference.\n\n3.  Make sure that the version of [react-navigation](https://github.com/react-navigation/react-navigation) you are using is 2.14.0 or higher\n\n4.  You are all set ðŸŽ‰ â€“ when screens are enabled in your application code react-navigation will automatically use them instead of relying on plain React Native Views.\n\n### Using createNativeStackNavigator with React Navigation\n\nTo take advantage of the native stack navigator primitive for React Navigation that leverages `UINavigationController` on iOS and `Fragment` on Android, please refer to the [README in react-native-screens/native-stack](https://github.com/software-mansion/react-native-screens/tree/master/native-stack) for React Navigation v5 and [README in react-native-screens/createNativeStackNavigator](https://github.com/software-mansion/react-native-screens/tree/master/createNativeStackNavigator) for older versions. \n\n## Interop with [react-native-navigation](https://github.com/wix/react-native-navigation)\n\nReact-native-navigation library already uses native containers for rendering navigation scenes so wrapping these scenes with `<ScreenContainer>` or `<Screen>` component does not provide any benefits. Yet if you would like to build a component that uses screens primitives under the hood (for example a view pager component) it is safe to use `<ScreenContainer>` and `<Screen>` components for that as these work out of the box when rendered on react-native-navigation scenes.\n\n## Interop with other libraries\n\nThis library should work out of the box with all existing react-native libraries. If you experience problems with interoperability please [report an issue](https://github.com/kmagiera/react-native-screens/issues).\n\n## Guide for navigation library authors\n\nIf you are building a navigation library you may want to use react-native-screens to have control over which parts of the React component tree are attached to the native view hierarchy.\nTo do that react-native-screens provides you with two components documented below:\n\n### `<ScreenContainer/>`\n\nThis component is a container for one or more `Screen` components.\nIt does not accept other component types as direct children.\nThe role of the container is to control which of its children's screens should be attached to the view hierarchy.\nIt does that by monitoring the `active` property of each of its children.\nIt is possible to have as many `active` children as you'd like but for the component to be the most efficient, we should keep the number of active screens to a minimum.\nIn the case of a stack navigator or tabs navigator, we only want to have one active screen (the topmost view on a stack or the selected tab).\nWhile transitioning between views we may want to activate a second screen for the duration of the transition, and then go back to just one active screen.\n\n### `<Screen/>`\n\nThis component is a container for views we want to display on a navigation screen.\nIt is designed to only be rendered as a direct child of `ScreenContainer`.\nIn addition to plain React Native [View props](http://facebook.github.io/react-native/docs/view#props) this component only accepts a single additional property called `active`.\nWhen `active` is set to `0`, the parent container will detach its views from the native view hierarchy.\nOtherwise, the views will be attached as long as the parent container is attached too.\n\n#### Example\n\n```js\n<ScreenContainer>\n  <Screen>{tab1}</Screen>\n  <Screen active={1}>{tab2}</Screen>\n  <Screen>{tab3}</Screen>\n</ScreenContainer>\n```\n\n### `<ScreenStack>`\n\nScreen stack component expects one or more `Screen` components as direct children and renders them in a platform-native stack container (for iOS it is `UINavigationController` and for Android inside `Fragment` container). For `Screen` components placed as children of `ScreenStack` the `active` property is ignored and instead the screen that corresponds to the last child is rendered as active. All types of updates done to the list of children are acceptable when the top element is exchanged the container will use platform default (unless customized) animation to transition between screens.\n\n`StackScreen` extends the capabilities of the `Screen` component to allow additional customizations and to make it possible to handle events such as using hardware back or back gesture to dismiss the top screen. Below is the list of additional properties that can be used for `Screen` component:\n\n#### `onDismissed`\n\nA callback that gets called when the current screen is dismissed by hardware back (on Android) or dismiss gesture (swipe back or down). The callback takes no arguments.\n\n#### `stackAnimation`\n\nAllows for the customization of how the given screen should appear/disappear when pushed or popped at the top of the stack. The following values are currently supported:\n\n- `\"default\"` â€“ uses a platform default animation\n- `\"fade\"` â€“ fades screen in or out\n- `\"flip\"` â€“ flips the screen, requires `stackPresentation: \"modal\"` (iOS only)\n- `\"none\"` â€“ the screen appears/disappears without an animation\n\n#### `stackPresentation`\n\nDefines how the method that should be used to present the given screen. It is a separate property from `stackAnimation` as the presentation mode can carry additional semantic. The allowed values are:\n\n- `push` â€“ the new screen will be pushed onto a stack which on iOS means that the default animation will be slide from the side, the animation on Android may vary depending on the OS version and theme.\n- `modal` â€“ Explained below.\n- `transparentModal` â€“ Explained below.\n- `containedModal` â€“ Explained below.\n- `containedTransparentModal` â€“ Explained below.\n- `fullScreenModal` â€“ Explained below.\n- `formSheet` â€“ Explained below.\n\nFor iOS:\n- `modal` will use [`UIModalPresentationAutomatic`](https://developer.apple.com/documentation/uikit/uimodalpresentationstyle/uimodalpresentationautomatic?language=objc) on iOS 13 and later, and will use [`UIModalPresentationFullScreen`](https://developer.apple.com/documentation/uikit/uimodalpresentationstyle/uimodalpresentationfullscreen?language=objc) on iOS 12 and earlier.\n- `fullScreenModal` will use [`UIModalPresentationFullScreen`](https://developer.apple.com/documentation/uikit/uimodalpresentationstyle/uimodalpresentationfullscreen?language=objc)\n- `formSheet` will use [`UIModalPresentationFormSheet`](https://developer.apple.com/documentation/uikit/uimodalpresentationstyle/uimodalpresentationformsheet?language=objc)\n- `transparentModal` will use [`UIModalPresentationOverFullScreen`](https://developer.apple.com/documentation/uikit/uimodalpresentationstyle/uimodalpresentationoverfullscreen?language=objc)\n- `containedModal` will use [`UIModalPresentationCurrentContext`](https://developer.apple.com/documentation/uikit/uimodalpresentationstyle/uimodalpresentationcurrentcontext?language=objc)\n- `containedTransparentModal` will use [`UIModalPresentationOverCurrentContext`](https://developer.apple.com/documentation/uikit/uimodalpresentationstyle/uimodalpresentationovercurrentcontext?language=objc)\n\nFor Android:\n\n`modal`, `containedModal`, `fullScreenModal`, `formSheet` will use `Screen.StackPresentation.MODAL`.\n\n`transparentModal`, `containedTransparentModal` will use `Screen.StackPresentation.TRANSPARENT_MODAL`.\n\n### `<ScreenStackHeaderConfig>`\n\nThe config component is expected to be rendered as a direct child of `<Screen>`. It provides an ability to configure native navigation header that gets rendered as a part of the native screen stack. The component acts as a \"virtual\" element that is not directly rendered under `Screen`. You can use its properties to customize platform native header for the parent screen and also render react-native components that you'd like to be displayed inside the header (e.g. in the title are or on the side).\n\nAlong with this component's properties that can be used to customize header behavior, one can also use one of the below component containers to render custom react-native content in different areas of the native header:\n\n- `ScreenStackHeaderCenterView` â€“ the children will render in the center of the native navigation bar.\n- `ScreenStackHeaderRightView` â€“ the children will render on the right-hand side of the navigation bar (or on the left-hand side in case LTR locales are set on the user's device).\n- `ScreenStackHeaderLeftView` â€“ the children will render on the left-hand side of the navigation bar (or on the right-hand side in case LTR locales are set on the user's device).\n\nBelow is a list of properties that can be set with `ScreenStackHeaderConfig` component:\n\n#### `hidden`\n\nWhen set to `true` the header will be hidden while the parent `Screen` is on the top of the stack. The default value is `false`.\n\n#### `color`\n\nControls the color of items rendered on the header. This includes a back icon, back text (iOS only) and title text. If you want the title to have a different color use `titleColor` property.\n\n#### `title`\n\nA string representing screen title that will get rendered in the middle section of the header. On iOS, the title is centered on the header while on Android it is aligned to the left and placed next to the back button (if one is present).\n\n#### `titleFontFamily`\n\nCustomize the font family to be used for the title.\n\n#### `titleFontSize`\n\nCustomize the size of the font to be used for the title.\n\n#### `titleColor`\n\nAllows for setting text color of the title.\n\n#### `backgroundColor`\n\nControls the color of the navigation header.\n\n#### `hideShadow`\n\nBoolean that allows for disabling drop shadow under navigation header. The default value is `true`.\n\n#### `hideBackButton`\n\nIf set to `true` the back button will not be rendered as a part of the navigation header.\n\n#### `backButtonInCustomView`\n\nIf set to `true` the back button will also be rendered while using `headerLeft` function.\n\n#### `direction`\n\nString that applies `rtl` or `ltr` form to the stack.\n\n#### `gestureEnabled` (iOS only)\n\nWhen set to `false` the back swipe gesture will be disabled when the parent `Screen` is on top of the stack. The default value is `true`.\n\n#### `translucent`\n\nWhen set to `true`, it allows the content to go under the navigation header, not bellow. If you want to create a transparent header, you should also set `backgroundColor` to `transparent`. The default value is `false`.\n\n#### `backTitle` (iOS only)\n\nAllows for controlling the string to be rendered next to the back button. By default, iOS uses the title of the previous screen.\n\n#### `backTitleFontFamily` (iOS only)\n\nAllows for customizing font family to be used for the back button title on iOS.\n\n#### `backTitleFontSize` (iOS only)\n\nAllows for customizing font size to be used for the back button title on iOS.\n\n#### `largeTitle` (iOS only)\n\nWhen set to `true` it makes the title display using the large title effect.\n\n#### `largeTitleFontFamily` (iOS only)\n\nCustomize the font family to be used for the large title.\n\n#### `largeTitleFontSize` (iOS only)\n\nCustomize the size of the font to be used for the large title.\n\n## Guide for native component authors\n\nIf you are adding a new native component to be used from the React Native app, you may want it to respond to navigation lifecycle events.\n\nA good example is a map component that shows the current user location. When the component is on the top-most screen, it should register for location updates and display the user's location on the map. But if we navigate away from a screen that has a map, e.g. by pushing a new screen on top of it or if it is in one of the tabs, and the user just switched to the previous app, we may want to stop listening to location updates.\n\nTo achieve that, we need to know at the native component level when our native view goes out of sight. With react-native-screens you can do that in the following way:\n\n### Navigation lifecycle on iOS\n\nIn order for your native view on iOS to be notified when its parent navigation container goes into background override `didMoveToWindow` method:\n\n```objective-c\n- (void)didMoveToWindow\n{\n  [super didMoveToWindow];\n  BOOL isVisible = self.superview && self.window;\n  if (isVisible) {\n    // navigation container this view belongs to became visible\n  } else {\n    // we are in a background\n  }\n}\n```\n\nYou can check our example app for a fully functional demo see [RNSSampleLifecycleAwareView.m](https://github.com/kmagiera/react-native-screens/blob/master/Example/ios/ScreensExample/RNSSampleLifecycleAwareView.m) for more details.\n\n### Navigation lifecycle on Android\n\nOn Android, you can use [LifecycleObserver](https://developer.android.com/reference/android/arch/lifecycle/LifecycleObserver) interface which is a part of Android compat library to make your view handle lifecycle events.\nCheck [LifecycleAwareView.java](https://github.com/kmagiera/react-native-screens/blob/master/Example/android/app/src/main/java/com/swmansion/rnscreens/example/LifecycleAwareView.java) from our example app for more details on that.\n\nIn addition to that, you will need to register for receiving these updates. This can be done using [`LifecycleHelper.register`](https://github.com/kmagiera/react-native-screens/blob/master/android/src/main/java/com/swmansion/rnscreens/LifecycleHelper.java#L50).\nRemember to call [`LifecycleHelper.unregister`](https://github.com/kmagiera/react-native-screens/blob/master/android/src/main/java/com/swmansion/rnscreens/LifecycleHelper.java#L59) before the view is dropped.\nPlease refer to [SampleLifecycleAwareViewManager.java](https://github.com/kmagiera/react-native-screens/blob/master/Example/android/app/src/main/java/com/swmansion/rnscreens/example/SampleLifecycleAwareViewManager.java) from our example app to see what are the best ways of using the above methods.\n\n## License\n\nReact native screens library is licensed under [The MIT License](LICENSE).\n\n## Credits\n\nThis project is supported by amazing people from [Expo.io](https://expo.io) and [Software Mansion](https://swmansion.com)\n\n[![expo](https://avatars2.githubusercontent.com/u/12504344?v=3&s=100 'Expo.io')](https://expo.io)\n[![swm](https://logo.swmansion.com/logo?color=white&variant=desktop&width=150&tag=react-native-screens-github 'Software Mansion')](https://swmansion.com)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2018 Krzysztof Magiera\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-native-screens/-/react-native-screens-2.15.2.tgz#a449700e895b462937211ec72ed6f09652758f06",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-native-screens/-/react-native-screens-2.15.2.tgz",
    "hash": "a449700e895b462937211ec72ed6f09652758f06",
    "integrity": "sha512-CagNf2APXkVoRlF3Mugr264FbKbrBg9eXUkqhIPVeZB8EsdS8XPrnt99yj/pzmT+yJMBY0dGrjXT8+68WYh6YQ==",
    "registry": "npm",
    "packageName": "react-native-screens",
    "cacheIntegrity": "sha512-CagNf2APXkVoRlF3Mugr264FbKbrBg9eXUkqhIPVeZB8EsdS8XPrnt99yj/pzmT+yJMBY0dGrjXT8+68WYh6YQ== sha1-pElwDolbRik3IR7HLtbwllJ1jwY="
  },
  "registry": "npm",
  "hash": "a449700e895b462937211ec72ed6f09652758f06"
}