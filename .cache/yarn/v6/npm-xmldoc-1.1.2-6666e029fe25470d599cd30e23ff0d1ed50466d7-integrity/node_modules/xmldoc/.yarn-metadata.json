{
  "manifest": {
    "name": "xmldoc",
    "description": "A lightweight XML Document class for JavaScript.",
    "author": {
      "name": "Nick Farina",
      "email": "nfarina@gmail.com",
      "url": "http://nfarina.com"
    },
    "version": "1.1.2",
    "main": "./index",
    "scripts": {
      "test": "tap test/*.js",
      "coverage": "npm test -- --cov --coverage-report=html"
    },
    "dependencies": {
      "sax": "^1.2.1"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git://github.com/nfarina/xmldoc.git"
    },
    "contributors": [
      {
        "name": "Nick Farina",
        "email": "nfarina@gmail.com"
      },
      {
        "name": "Caleb Meredith",
        "email": "calebmeredith8@gmail.com"
      }
    ],
    "readmeFilename": "README.md",
    "devDependencies": {
      "tap": "^8.0.1"
    },
    "_registry": "npm",
    "_loc": "/home/howard/.cache/yarn/v6/npm-xmldoc-1.1.2-6666e029fe25470d599cd30e23ff0d1ed50466d7-integrity/node_modules/xmldoc/package.json",
    "readme": "\n[![Build Status](https://travis-ci.org/nfarina/xmldoc.svg)](https://travis-ci.org/nfarina/xmldoc)\n[![Coverage Status](https://coveralls.io/repos/github/nfarina/xmldoc/badge.svg?branch=master)](https://coveralls.io/github/nfarina/xmldoc?branch=master)\n\n## Introduction\n\n`xmldoc` lets you parse XML documents with ease. It's a pure-JavaScript, one-file XML document class with a single dependency on the excellent [`sax`][sax] parser.\n\nFor more on why I wrote this class, see the [blog post][blog].\n\n  [blog]: http://nfarina.com/post/34302964969/a-lightweight-xml-document-class-for-nodejs-javascript\n\n## Release Notes\n\nSee [CHANGELOG.md](./CHANGELOG.md) for details (built with [GitHub Changelog Generator](https://skywinder.github.io/github-changelog-generator/)).\n\n## Installation\n\n    npm install xmldoc\n\nOr just download the repository and include it in your `node_modules` directly. Or just download the [single JS file][blob]!\n\n  [blob]: https://github.com/nfarina/xmldoc/blob/master/lib/xmldoc.js\n\n## Installation - React Native\n\nI haven't tested this myself but [installing `buffer` and `stream` separately](https://github.com/nfarina/xmldoc/issues/38) may be necessary for `xmldoc` to work on React Native:\n\n    npm install buffer stream xmldoc\n\n## Usage\n\n```js\nvar xmldoc = require('xmldoc');\n\nvar document = new xmldoc.XmlDocument(\"<some>xml</some>\");\n\n// do things\n```\n\n## Classes\n\nThe primary exported class is `XmlDocument`, which you'll use to consume your XML text. `XmlDocument` contains a hierarchy of `XmlElement` instances representing the XML structure.\n\nBoth `XmlElement` and `XmlDocument` contain the same members and methods you can call to traverse the document or a subtree.\n\n## Members\n\n* `name` - the node name, like \"tat\" for `<tat>`. XML \"namespaces\" are ignored by the underlying [sax-js](https://github.com/isaacs/sax-js) parser, so you'll simply get \"office:body\" for `<office:body>`.\n* `attr` - an object dict containing attribute properties, like `bookNode.attr.title` for `<book title=\"...\">`.\n* `val` - the string \"value\" of the node, if any, like \"world\" for `<hello>world</hello>`.\n* `children` - an array of `XmlElement` children of the node.\n* `firstChild`, `lastChild` - pretty much what it sounds like; null if no children\n* `line`, `column`, `position`, `startTagPosition` - information about the element's original position in the XML string.\n\nEach member defaults to a sensible \"empty\" value like `{}` for `attr`, `[]` for `children`, and `\"\"` for `val`.\n\n## Methods\n\nAll methods with `child` in the name operate only on direct children; they do not do a deep/recursive search.\n\nIt's important to note that `xmldoc` is designed for when you know exactly what you want from your XML file. For instance, it's great for parsing API responses with known structures, but it's not great at teasing things out of HTML documents from the web.\n\nIf you need to do lots of searching through your XML document, I highly recommend trying a different library like [node-elementtree](https://github.com/racker/node-elementtree).\n\n### eachChild(func)\n\nSimilar to [underscore's][underscore] `each` method, it will call `func(child, index, array)` for each child of the given node.\n\n### childNamed(name)\n\nPass it the name of a child node and it will search for and return the first one found, or `undefined`.\n\n### childrenNamed(name)\n\nLike `childNamed` but returns all matching children in an array, or `[]`.\n\n### childWithAttribute(name,value)\n\nSearches for the first child with the given attribute value. You can omit `value` to just find the first node with the given attribute defined at all.\n\n### descendantWithPath(path)\n\nSearches for a specific \"path\" using dot notation. Example:\n\n```xml\n<book>\n  <author>\n    <name isProper=\"true\">George R. R. Martin</name>\n    ...\n  </author>\n  ...\n</book>\n```\n\nIf you just want the `<name>` node and you have the `XmlElement` for the `<book>` node, you can say:\n\n```js\nvar nameNode = bookNode.descendantWithPath(\"author.name\"); // return <name> node\n```\n\n### valueWithPath(path)\n\nJust like `descendantWithPath`, but goes deeper and extracts the `val` of the node. Example:\n\n```js\nvar authorName = bookNode.valueWithPath(\"author.name\"); // return \"George R. R. Martin\"\n```\n\nYou can also use the `@` character to request the value of a particular _attribute_ instead:\n\n```js\nvar authorIsProper = bookNode.valueWithPath(\"author.name@isProper\"); // return \"true\"\n```\n\nThis is not [XPath][]! It's just a thing I made up, OK?\n\n### toString([options])\n\nThis is just an override of the standard JavaScript method, it will give you a string representation of your XML document or element. Note that this is for debugging only! It is not guaranteed to always output valid XML.\n\nThe default implementation of `toString()`, that is, the one you get when you just `console.log(\"Doc: \" + myDoc)` will pretty-print the XML with linebreaks and indents. You can pass a couple options to control the output:\n\n```js\nxml.toString({compressed:true}) // strips indents and linebreaks\nxml.toString({trimmed:true}) // trims long strings for easier debugging\nxml.toString({preserveWhitespace:true}) // prevents whitespace being removed from around element values\n```\n\nPutting it all together:\n\n```js\nvar xml = \"<author><name>looooooong value</name></author>\";\nconsole.log(\"My document: \\n\" + new XmlDocument(xml).toString({trimmed:true}))\n```\n\nPrints:\n\n    My Document:\n    <hello>\n      looooooooâ€¦\n    </hello>\n\n## Feedback\n\nFeel free to file issues or hit me up on [Twitter][twitter].\n\n  [underscore]: http://underscorejs.org\n  [XPath]: http://en.wikipedia.org/wiki/XPath\n  [twitter]: http://twitter.com/nfarina\n  [sax]: https://github.com/isaacs/sax-js\n",
    "licenseText": "Copyright 2012 Nick Farina.\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/xmldoc/-/xmldoc-1.1.2.tgz#6666e029fe25470d599cd30e23ff0d1ed50466d7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/xmldoc/-/xmldoc-1.1.2.tgz",
    "hash": "6666e029fe25470d599cd30e23ff0d1ed50466d7",
    "integrity": "sha512-ruPC/fyPNck2BD1dpz0AZZyrEwMOrWTO5lDdIXS91rs3wtm4j+T8Rp2o+zoOYkkAxJTZRPOSnOGei1egoRmKMQ==",
    "registry": "npm",
    "packageName": "xmldoc",
    "cacheIntegrity": "sha512-ruPC/fyPNck2BD1dpz0AZZyrEwMOrWTO5lDdIXS91rs3wtm4j+T8Rp2o+zoOYkkAxJTZRPOSnOGei1egoRmKMQ== sha1-ZmbgKf4lRw1ZnNMOI/8NHtUEZtc="
  },
  "registry": "npm",
  "hash": "6666e029fe25470d599cd30e23ff0d1ed50466d7"
}