{
  "manifest": {
    "name": "@callstack/react-theme-provider",
    "version": "3.0.5",
    "description": "Theme provider for react and react-naitve applications",
    "main": "./lib/index.js",
    "typings": "./typings/index.d.ts",
    "files": [
      "lib",
      "typings"
    ],
    "scripts": {
      "flow": "flow",
      "typescript": "tsc",
      "lint": "eslint .",
      "prepare": "babel src --out-dir lib --ignore '**/__tests__/**' --source-maps --delete-dir-on-start && flow-copy-source -i '**/__tests__/**' src lib",
      "test": "jest",
      "example": "yarn link && cd examples/web && yarn link @callstack/react-theme-provider && yarn start"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/callstack/react-theme-provider.git"
    },
    "keywords": [
      "react",
      "react-native",
      "theme",
      "provider"
    ],
    "author": {},
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/callstack/react-theme-provider/issues"
    },
    "homepage": "https://github.com/callstack/react-theme-provider#readme",
    "devDependencies": {
      "@babel/cli": "^7.2.3",
      "@babel/core": "^7.3.4",
      "@babel/plugin-proposal-class-properties": "^7.3.4",
      "@babel/preset-env": "^7.3.4",
      "@babel/preset-flow": "^7.0.0",
      "@babel/preset-react": "^7.0.0",
      "@callstack/eslint-config": "^3.0.2",
      "@types/react": "^16.8.8",
      "eslint": "^5.15.1",
      "flow-bin": "^0.94.0",
      "flow-copy-source": "^2.0.3",
      "jest": "^24.5.0",
      "prettier": "^1.16.4",
      "react": "^16.8.4",
      "react-dom": "^16.8.4",
      "typescript": "^3.3.3333"
    },
    "peerDependencies": {
      "react": "^16.3.0"
    },
    "dependencies": {
      "deepmerge": "^3.2.0",
      "hoist-non-react-statics": "^3.3.0"
    },
    "jest": {
      "moduleNameMapper": {
        "\\.(css|less)$": "<rootDir>/__mocks__/styleMock.js"
      },
      "testPathIgnorePatterns": [
        "/node_modules/",
        "/typings/"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/howard/.cache/yarn/v6/npm-@callstack-react-theme-provider-3.0.5-a173e455e9603c9c45357a3b6ace1273086527ca-integrity/node_modules/@callstack/react-theme-provider/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n  <img alt=\"react-theme-provider\" src=\"./assets/theme-provider-logo.png\" width=\"496\">\n</p>\n\n---\n\n[![Build Status][build-badge]][build]\n[![Version][version-badge]][package]\n[![MIT License][license-badge]][license]\n\n## About\n\n`@callstack/react-theme-provider` is a set of utilities that help you create your own theming system in few easy steps.\nYou can use it to customize colors, fonts, etc.\n\n## Features\n\n- Works in **React** and **React Native**\n- `createTheming(defaultTheme)` - factory returns:\n  - `ThemeProvider` - component\n  - `withTheme` - Higher Order Component\n  - `useTheme` - React Hook\n\n## Examples\n\n- built-in example for web react - ['/examples/web'](/examples/web)\n- [![Edit v6o562k6l7](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/v6o562k6l7)\n\n## Getting started\n\n### Installation\n\n```sh\nnpm install --save @callstack/react-theme-provider\n```\n\nor using yarn\n\n```sh\nyarn add @callstack/react-theme-provider\n```\n\n### Usage\n\nImport `createTheming` from the library to create a theming object.\n\n```js\nimport { createTheming } from '@callstack/react-theme-provider';\n\nconst { ThemeProvider, withTheme, useTheme } = createTheming(defaultTheme);\n```\n\nThen wrap your code in `ThemeProvider` component to make it available to all components.\n\n```js\n<ThemeProvider>\n  <App />\n</ThemeProvider>\n```\n\nYou can access the theme data in your components by wrapping it in `withTheme` HOC:\n\n```js\nclass App extends React.Component {\n  render() {\n    return <div style={{ color: props.theme.primaryColor }}>Hello</div>;\n  }\n}\n\nexport default withTheme(App);\n```\n\nYou can also use the [hooks](https://reactjs.org/docs/hooks-intro.html) based API:\n\n```js\nfunction App() {\n  const theme = useTheme();\n\n  return <div style={{ color: theme.primaryColor }}>Hello</div>;\n}\n```\n\n### Usage\n\n```js\nconst App = ({ theme }) => (\n  <div style={{ color: theme.primaryColor }}>\n    Hello\n  </div>\n);\n\nexport withTheme(App);\n```\n\n### Injected props\n\nIt will inject the following props to the component:\n\n- `theme` - our theme object.\n- `getWrappedInstance` - exposed by some HOCs like react-redux's `connect`.\n  Use it to get the ref of the underlying element.\n\n### Injecting theme by a direct prop\n\nYou can also override `theme` provided by `ThemeProvider` by setting `theme` prop on the component wrapped in `withTheme` HOC.\n\nJust like this:\n\n```js\nconst Button = withTheme(({ theme }) => (\n  <div style={{ color: theme.primaryColor }}>Click me</div>\n));\n\nconst App = () => (\n  <ThemeProvider theme={{ primaryColor: 'red' }}>\n    <Button theme={{ primaryColor: 'green' }} />\n  </ThemeProvider>\n);\n```\n\nIn this example Button will have green text.\n\n## `createTheming`\n\n**type:**\n\n```js\n<T, S>(defaultTheme: T) => {\n  ThemeProvider: ThemeProviderType<T>,\n  withTheme: WithThemeType<T, S>,\n}\n```\n\nThis is more advanced replacement to classic importing `ThemeProvider` and `withTheme` directly from the library.\nThanks to it you can create your own ThemeProvider with any default theme.\n\nReturns instance of `ThemeProvider` component and `withTheme` HOC.\nYou can use this factory to create a singleton with your instances of `ThemeProvider` and `withTheme`.\n\n> **Note:** `ThemeProvider` and `withTheme` generated by `createTheming` always will use different context so make sure you are using matching `withTheme`!\n> If you acidentially import `withTheme` from `@callstack/react-theme-provider` instead of your theming instance it won't work.\n\n### Arguments\n\n- `defaultTheme` - default theme object\n\n### Benefits\n\n- Possibility to define `flow` types for your theme\n- Possibility to pass default theme\n- You can use multiple `ThemeProvider`s in your app without any conflicts.\n\n### Usage\n\n```js\n// theming.js\nimport { createTheming } from '@callstack/react-theme-provider';\nconst { ThemeProvider, withTheme } = createTheming({\n  primaryColor: 'red',\n  secondaryColor: 'green',\n});\nexport { ThemeProvider, withTheme };\n\n//App.js\nimport { ThemeProvider, withTheme } from './theming';\n```\n\n### Helpers\n\n#### `ThemeProvider`\n\n**type:**\n\n```js\ntype ThemeProviderType<Theme> = React.ComponentType<{\n  children: React.Node,\n  theme?: Theme,\n}>;\n```\n\nComponent you have to use to provide the theme to any component wrapped in `withTheme` HOC.\n\n##### Props\n\n-`theme` - your theme object\n\n#### `withTheme`\n\n**type:**\n\n```js\ntype WithThemeType<Theme> = React.ComponentType<{ theme: Theme }>\n```\n\nHigher Order Component which takes your component as an argument and injects `theme` prop into it.\n\n## Applying a custom theme to a component\n\nIf you want to change the theme for a certain component, you can directly pass the theme prop to the component. The theme passed as the prop is merged with the theme from the Provider.\n\n```js\nimport * as React from 'react';\nimport MyButton from './MyButton';\n\nexport default function ButtonExample() {\n  return <MyButton theme={{ roundness: 3 }}>Press me</MyButton>;\n}\n```\n\n#### `useTheme`\n\n**type:**\n\n```js\ntype UseTheme = (overrides?: PartialTheme) => Theme;\n```\n\nHook which takes theme overrides and returns a theme object.\n\nExample:\n\n```js\nfunction App(props) {\n  const theme = useTheme(props.theme);\n\n  return <div style={{ color: theme.primaryColor }}>Hello</div>;\n}\n```\n\n## Applying a custom theme to a component\n\nIf you want to change the theme for a certain component, you can directly pass the theme prop to the component. The theme passed as the prop is merged with the theme from the Provider.\n\n```js\nimport * as React from 'react';\nimport MyButton from './MyButton';\n\nexport default function ButtonExample() {\n  return <MyButton theme={{ roundness: 3 }}>Press me</MyButton>;\n}\n```\n\n## Gotchas\n\nThe `ThemeProvider` exposes the theme to the components via [React's context API](https://reactjs.org/docs/context.html),\nwhich means that the component must be in the same tree as the `ThemeProvider`. Some React Native components will render a\ndifferent tree such as a `Modal`, in which case the components inside the `Modal` won't be able to access the theme. The work\naround is to get the theme using the `withTheme` HOC and pass it down to the components as props, or expose it again with the\nexported `ThemeProvider` component.\n\n[build-badge]: https://img.shields.io/circleci/project/github/callstack/react-theme-provider/master.svg?style=flat-square\n[build]: https://circleci.com/gh/callstack/react-theme-provider\n[version-badge]: https://img.shields.io/npm/v/@callstack/react-theme-provider.svg?style=flat-square\n[package]: https://www.npmjs.com/package/@callstack/react-theme-provider\n[license-badge]: https://img.shields.io/npm/l/react-theme-provider.svg?style=flat-square\n[license]: https://opensource.org/licenses/MIT\n[chat-badge]: https://img.shields.io/badge/chat-slack-brightgreen.svg?style=flat-square&colorB=E01563\n[chat]: https://slack.callstack.com/\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Callstack\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@callstack/react-theme-provider/-/react-theme-provider-3.0.5.tgz#a173e455e9603c9c45357a3b6ace1273086527ca",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@callstack/react-theme-provider/-/react-theme-provider-3.0.5.tgz",
    "hash": "a173e455e9603c9c45357a3b6ace1273086527ca",
    "integrity": "sha512-Iec+ybWN0FvNj87sD3oWo/49edGUP0UOSdMnzCJEFJIDYr992ECIuOV89burAAh2/ibPCxgLiK6dmgv2mO/8Tg==",
    "registry": "npm",
    "packageName": "@callstack/react-theme-provider",
    "cacheIntegrity": "sha512-Iec+ybWN0FvNj87sD3oWo/49edGUP0UOSdMnzCJEFJIDYr992ECIuOV89burAAh2/ibPCxgLiK6dmgv2mO/8Tg== sha1-oXPkVelgPJxFNXo7as4ScwhlJ8o="
  },
  "registry": "npm",
  "hash": "a173e455e9603c9c45357a3b6ace1273086527ca"
}