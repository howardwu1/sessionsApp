{
  "manifest": {
    "name": "@expo/spawn-async",
    "version": "1.5.0",
    "description": "A Promise-based interface into processes created by child_process.spawn",
    "main": "index.js",
    "types": "./build/spawnAsync.d.ts",
    "files": [
      "build"
    ],
    "engines": {
      "node": ">=4"
    },
    "scripts": {
      "build": "tsc",
      "clean": "rm -rf build",
      "prepare": "yarn clean && yarn build",
      "test": "jest"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/expo/spawn-async.git"
    },
    "keywords": [
      "spawn",
      "child_process",
      "async",
      "promise",
      "process"
    ],
    "author": {
      "name": "Expo"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/expo/spawn-async/issues"
    },
    "homepage": "https://github.com/expo/spawn-async#readme",
    "jest": {
      "preset": "ts-jest",
      "testEnvironment": "node",
      "rootDir": "src"
    },
    "dependencies": {
      "cross-spawn": "^6.0.5"
    },
    "devDependencies": {
      "@types/cross-spawn": "^6.0.0",
      "@types/jest": "^23.3.9",
      "jest": "^23.6.0",
      "ts-jest": "^23.10.4",
      "typescript": "^3.1.6"
    },
    "_registry": "npm",
    "_loc": "/home/howard/.cache/yarn/v6/npm-@expo-spawn-async-1.5.0-799827edd8c10ef07eb1a2ff9dcfe081d596a395-integrity/node_modules/@expo/spawn-async/package.json",
    "readmeFilename": "README.md",
    "readme": "# spawn-async [![CircleCI](https://circleci.com/gh/expo/spawn-async.svg?style=svg)](https://circleci.com/gh/expo/spawn-async) [![Build Status](https://travis-ci.org/expo/spawn-async.svg?branch=master)](https://travis-ci.org/expo/spawn-async)\n\nA cross-platform version of Node's `child_process.spawn` as an async function that returns a promise. Supports Node 8 LTS and up.\n\n## Usage:\n```js\nimport spawnAsync from '@expo/spawn-async';\n\n(async function () {\n    let resultPromise = spawnAsync('echo', ['hello', 'world']);\n    let spawnedChildProcess = resultPromise.child;\n    try {\n      let {\n        pid,\n        output: [stdout, stderr],\n        stdout,\n        stderr,\n        status,\n        signal,\n      } = await resultPromise;\n    } catch (e) {\n       console.error(e.stack);\n      // The error object also has the same properties as the result object\n    }\n})();\n```\n\n## API\n\n`spawnAsync` takes the same arguments as [`child_process.spawn`](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options). Its options are the same as those of `child_process.spawn` plus:\n\n- `ignoreStdio`: whether to ignore waiting for the child process's stdio streams to close before resolving the result promise. When ignoring stdio, the returned values for `stdout` and `stderr` will be empty strings. The default value of this option is `false`.\n\nIt returns a promise whose result is an object with these properties:\n\n- `pid`: the process ID of the spawned child process\n- `output`: an array with stdout and stderr's output\n- `stdout`: a string of what the child process wrote to stdout\n- `stderr`: a string of what the child process wrote to stderr\n- `status`: the exit code of the child process\n- `signal`: the signal (ex: `SIGTERM`) used to stop the child process if it did not exit on its own\n\nIf there's an error running the child process or it exits with a non-zero status code, `spawnAsync` rejects the returned promise. The Error object also has the properties listed above.\n\n### Accessing the child process\n\nSometimes you may want to access the child process object--for example, if you wanted to attach event handlers to `stdio` or `stderr` and process data as it is available instead of waiting for the process to be resolved.\n\nYou can do this by accessing `.child` on the Promise that is returned by `spawnAsync`.\n\nHere is an example:\n```js\n(async () => {\n    let ffmpeg$ = spawnAsync('ffmpeg', ['-i', 'path/to/source.flac', '-codec:a', 'libmp3lame', '-b:a', '320k', '-ar', '44100', 'path/to/output.mp3']);\n    let childProcess = ffmpeg$.child;\n    childProcess.stdout.on('data', (data) => {\n      console.log(`ffmpeg stdout: ${data}`);\n    });\n    childProcess.stderr.on('data', (data) => {\n      console.error(`ffmpeg stderr: ${data}`);\n    });\n    let result = await ffmpeg$;\n    console.log(`ffmpeg pid ${result.pid} exited with code ${result.code}`);\n})();\n\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 650 Industries\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@expo/spawn-async/-/spawn-async-1.5.0.tgz#799827edd8c10ef07eb1a2ff9dcfe081d596a395",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@expo/spawn-async/-/spawn-async-1.5.0.tgz",
    "hash": "799827edd8c10ef07eb1a2ff9dcfe081d596a395",
    "integrity": "sha512-LB7jWkqrHo+5fJHNrLAFdimuSXQ2MQ4lA7SQW5bf/HbsXuV2VrT/jN/M8f/KoWt0uJMGN4k/j7Opx4AvOOxSew==",
    "registry": "npm",
    "packageName": "@expo/spawn-async",
    "cacheIntegrity": "sha512-LB7jWkqrHo+5fJHNrLAFdimuSXQ2MQ4lA7SQW5bf/HbsXuV2VrT/jN/M8f/KoWt0uJMGN4k/j7Opx4AvOOxSew== sha1-eZgn7djBDvB+saL/nc/ggdWWo5U="
  },
  "registry": "npm",
  "hash": "799827edd8c10ef07eb1a2ff9dcfe081d596a395"
}