{
  "manifest": {
    "name": "react-native-modal",
    "version": "11.7.0",
    "description": "An enhanced React Native modal",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "files": [
      "dist/"
    ],
    "scripts": {
      "lint": "eslint \"src/**/*.{ts, tsx}\"",
      "test": "yarn run test:ts && yarn run lint",
      "release": "yarn semantic-release",
      "build": "tsc",
      "dev": "tsc --watch",
      "test:ts": "tsc --noEmit",
      "build:e2e:android:debug": "detox build -c android.emu.debug",
      "build:e2e:android:release": "detox build -c android.emu.release",
      "test:e2e:android:debug": "detox test -c android.emu.debug",
      "test:e2e:android:release": "detox test -c android.emu.release",
      "build:e2e:ios:debug": "detox build -c ios.sim.debug",
      "build:e2e:ios:release": "detox build -c ios.sim.release",
      "test:e2e:ios:debug": "detox test -c ios.sim.debug",
      "test:e2e:ios:release": "detox test -c ios.sim.release"
    },
    "husky": {
      "hooks": {
        "pre-commit": "pretty-quick --staged"
      }
    },
    "keywords": [
      "react-native",
      "react",
      "native",
      "modal",
      "android",
      "ios",
      "backdrop",
      "simple",
      "animated"
    ],
    "author": {
      "name": "Mazzarolo Matteo"
    },
    "license": "MIT",
    "homepage": "https://github.com/react-native-community/react-native-modal",
    "repository": {
      "type": "git",
      "url": "https://github.com/react-native-community/react-native-modal"
    },
    "dependencies": {
      "prop-types": "^15.6.2",
      "react-native-animatable": "1.3.3"
    },
    "devDependencies": {
      "@babel/core": "^7.5.5",
      "@babel/runtime": "^7.6.3",
      "@react-native-community/eslint-config": "^0.0.5",
      "@semantic-release/git": "^9.0.0",
      "@types/react": "^16.9.9",
      "@types/react-native": "^0.60.21",
      "@typescript-eslint/eslint-plugin": "^2.4.0",
      "@typescript-eslint/parser": "^2.4.0",
      "babel-core": "7.0.0-bridge.0",
      "babel-jest": "^24.9.0",
      "babel-plugin-module-resolver": "3.1.3",
      "detox": "14.7.0",
      "eslint": "^6.5.1",
      "eslint-plugin-prettier": "^3.1.1",
      "husky": "^3.0.9",
      "jest": "^24.9.0",
      "metro-react-native-babel-preset": "0.56.0",
      "postinstall": "^0.5.1",
      "prettier": "^1.18.2",
      "pretty-quick": "^2.0.0",
      "react": "16.9.0",
      "react-native": "0.61.0",
      "react-test-renderer": "16.8.6",
      "semantic-release": "17.3.0",
      "typescript": "3.7.2"
    },
    "peerDependencies": {
      "react": "*",
      "react-native": "*"
    },
    "jest": {
      "preset": "react-native"
    },
    "detox": {
      "runner-config": "example/e2e/config.json",
      "configurations": {
        "ios.sim.debug": {
          "binaryPath": "example/ios/build/Build/Products/Debug-iphonesimulator/ModalExample.app",
          "build": "export RCT_NO_LAUNCH_PACKAGER=true && xcodebuild -workspace example/ios/ModalExample.xcworkspace -scheme ModalExample -configuration Debug -sdk iphonesimulator -derivedDataPath example/ios/build -UseModernBuildSystem=YES | xcpretty -k",
          "type": "ios.simulator",
          "device": {
            "type": "iPhone 8"
          }
        },
        "ios.sim.release": {
          "binaryPath": "example/ios/build/Build/Products/Debug-iphonesimulator/ModalExample.app",
          "build": "export RCT_NO_LAUNCH_PACKAGER=true && xcodebuild -workspace example/ios/ModalExample.xcworkspace -scheme ModalExample -configuration Release -sdk iphonesimulator -derivedDataPath example/ios/build -UseModernBuildSystem=YES | xcpretty -k",
          "type": "ios.simulator",
          "device": {
            "type": "iPhone 8"
          }
        },
        "android.emu.debug": {
          "binaryPath": "example/android/app/build/outputs/apk/debug/app-debug.apk",
          "build": "export RCT_NO_LAUNCH_PACKAGER=true && pushd example/android && ./gradlew assembleDebug assembleAndroidTest -DtestBuildType=debug && popd",
          "type": "android.emulator",
          "name": "Pixel_2_API_28"
        },
        "android.emu.release": {
          "binaryPath": "example/android/app/build/outputs/apk/release/app-release.apk",
          "build": "export RCT_NO_LAUNCH_PACKAGER=true && pushd example/android && ./gradlew assembleRelease assembleAndroidTest -DtestBuildType=release && popd",
          "type": "android.emulator",
          "name": "Pixel_2_API_28"
        }
      },
      "test-runner": "jest"
    },
    "_registry": "npm",
    "_loc": "/home/howard/.cache/yarn/v6/npm-react-native-modal-11.7.0-6637d757eeac6eda85f7017a9dfdee0c0fe3a34c-integrity/node_modules/react-native-modal/package.json",
    "readmeFilename": "README.md",
    "readme": "ðŸš§ We're looking for maintainers and contributors! See [#414](https://github.com/react-native-community/react-native-modal/issues/414)\n\n<br />\n\n# react-native-modal\n\n[![npm version](https://badge.fury.io/js/react-native-modal.svg)](https://badge.fury.io/js/react-native-modal)\n[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\nAn enhanced, animated and customizable react-native modal.\n\nThe goal of `react-native-modal` is expanding the original react-native `Modal` component by adding animations and styles customization options while still providing a plain-simple API.\n\n<p align=\"center\">\n<img src=\"/.github/images/example-modal.gif\" height=\"500\" />\n</p>\n\n## Features\n\n- Smooth enter/exit animations\n- Plain simple and flexible APIs\n- Customizable backdrop opacity, color and timing\n- Listeners for the modal animations ending\n- Resize itself correctly on device rotation\n- Swipeable\n- Scrollable\n\n## Setup\n\nThis library is available on npm, install it with: `npm i react-native-modal` or `yarn add react-native-modal`.\n\n## Usage\n\nSince react-native-modal is an extension of the original react native modal, it works in a similar fashion [react-native original modal](https://reactnative.dev/docs/modal.html).\n\n1.  Import react-native-modal:\n\n```javascript\nimport Modal from 'react-native-modal';\n```\n\n2.  Create a modal and nest its content inside of it:\n\n```javascript\nfunction WrapperComponent() {\n  return (\n    <View>\n      <Modal>\n        <View style={{ flex: 1 }}>\n          <Text>I am the modal content!</Text>\n        </View>\n      </Modal>\n    </View>\n  )\n}\n```\n\n3.  Then simply show it by setting the `isVisible` prop to true:\n\n```javascript\nfunction WrapperComponent() {\n  return (\n    <View>\n      <Modal isVisible={true}>\n        <View style={{ flex: 1 }}>\n          <Text>I am the modal content!</Text>\n        </View>\n      </Modal>\n    </View>\n  )\n}\n```\n\nThe `isVisible` prop is the only prop you'll really need to make the modal work: you should control this prop value by saving it in your wrapper component state and setting it to `true` or `false` when needed.\n\n## A complete example\n\nThe following example consists in a component (`ModalTester`) with a button and a modal.\nThe modal is controlled by the `isModalVisible` state variable and it is initially hidden, since its value is `false`.  \nPressing the button sets `isModalVisible` to true, making the modal visible.  \nInside the modal there is another button that, when pressed, sets `isModalVisible` to false, hiding the modal.\n\n```javascript\nimport React, {useState} from 'react';\nimport {Button, Text, View} from 'react-native';\nimport Modal from 'react-native-modal';\n\nfunction ModalTester() {\n  const [isModalVisible, setModalVisible] = useState(false);\n  \n  const toggleModal = () => {\n    setModalVisible(!isModalVisible);\n  };\n\n    return (\n      <View style={{flex: 1}}>\n        <Button title=\"Show modal\" onPress={toggleModal} />\n\n        <Modal isVisible={isModalVisible}>\n          <View style={{flex: 1}}>\n            <Text>Hello!</Text>\n\n            <Button title=\"Hide modal\" onPress={toggleModal} />\n          </View>\n        </Modal>\n      </View>\n    );\n}\n\nexport default ModalTester;\n```\n\nFor a more complex example take a look at the `/example` directory.\n\n## Available props\n\n| Name                           | Type             | Default                        | Description                                                                                                                                |\n| ------------------------------ | ---------------- | ------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| animationIn                    | string or object | 'slideInUp'                    | Modal show animation                                                                                                                       |\n| animationInTiming              | number           | 300                            | Timing for the modal show animation (in ms)                                                                                                |\n| animationOut                   | string or object | 'slideOutDown'                 | Modal hide animation                                                                                                                       |\n| animationOutTiming             | number           | 300                            | Timing for the modal hide animation (in ms)                                                                                                |\n| avoidKeyboard                  | bool             | false                          | Move the modal up if the keyboard is open                                                                                                  |\n| coverScreen                    | bool             | true                           | Will use RN `Modal` component to cover the entire screen wherever the modal is mounted in the component hierarchy                          |\n| hasBackdrop                    | bool             | true                           | Render the backdrop                                                                                                                        |\n| backdropColor                  | string           | 'black'                        | The backdrop background color                                                                                                              |\n| backdropOpacity                | number           | 0.70                           | The backdrop opacity when the modal is visible                                                                                             |\n| backdropTransitionInTiming     | number           | 300                            | The backdrop show timing (in ms)                                                                                                           |\n| backdropTransitionOutTiming    | number           | 300                            | The backdrop hide timing (in ms)                                                                                                           |\n| customBackdrop                 | node             | null                           | The custom backdrop element                                                                                                                |\n| children                       | node             | **REQUIRED**                   | The modal content                                                                                                                          |\n| deviceHeight                   | number           | null                           | Device height (useful on devices that can hide the navigation bar)                                                                         |\n| deviceWidth                    | number           | null                           | Device width (useful on devices that can hide the navigation bar)                                                                          |\n| isVisible                      | bool             | **REQUIRED**                   | Show the modal?                                                                                                                            |\n| onBackButtonPress              | func             | () => null                     | Called when the Android back button is pressed                                                                                             |\n| onBackdropPress                | func             | () => null                     | Called when the backdrop is pressed                                                                                                        |\n| onModalWillHide                | func             | () => null                     | Called before the modal hide animation begins                                                                                              |\n| onModalHide                    | func             | () => null                     | Called when the modal is completely hidden                                                                                                 |\n| onModalWillShow                | func             | () => null                     | Called before the modal show animation begins                                                                                              |\n| onModalShow                    | func             | () => null                     | Called when the modal is completely visible                                                                                                |\n| onSwipeStart                   | func             | () => null                     | Called when the swipe action started                                                                                                       |\n| onSwipeMove                    | func             | (percentageShown) => null      | Called on each swipe event                                                                                                                 |\n| onSwipeComplete                | func             | ({ swipingDirection }) => null | Called when the `swipeThreshold` has been reached                                                                                          |\n| onSwipeCancel                  | func             | () => null                     | Called when the `swipeThreshold` has not been reached                                                                                      |\n| scrollOffset                   | number           | 0                              | When > 0, disables swipe-to-close, in order to implement scrollable content                                                                |\n| scrollOffsetMax                | number           | 0                              | Used to implement overscroll feel when content is scrollable. See `/example` directory                                                     |\n| scrollTo                       | func             | null                           | Used to implement scrollable modal. See `/example` directory for reference on how to use it                                                |\n| scrollHorizontal               | bool             | false                          | Set to true if your scrollView is horizontal (for a correct scroll handling)                                                               |\n| swipeThreshold                 | number           | 100                            | Swiping threshold that when reached calls `onSwipeComplete`                                                                                |\n| swipeDirection                 | string or array  | null                           | Defines the direction where the modal can be swiped. Can be 'up', 'down', 'left, or 'right', or a combination of them like `['up','down']` |\n| useNativeDriver                | bool             | false                          | Defines if animations should use native driver                                                                                             |\n| useNativeDriverForBackdrop     | bool             | null                           | Defines if animations for backdrop should use native driver (to avoid flashing on android)                                                 |\n| hideModalContentWhileAnimating | bool             | false                          | Enhances the performance by hiding the modal content until the animations complete                                                         |\n| propagateSwipe                 | bool             | false                          | Allows swipe events to propagate to children components (eg a ScrollView inside a modal)                                                   |\n| style                          | any              | null                           | Style applied to the modal                                                                                                                 |\n\n## Frequently Asked Questions\n\n### The component is not working as expected\n\nUnder the hood `react-native-modal` uses react-native original [Modal component](https://reactnative.dev/docs/modal.html).  \nBefore reporting a bug, try swapping `react-native-modal` with react-native original Modal component and, if the issue persists, check if it has already been reported as a [react-native issue](https://github.com/facebook/react-native/issues).\n\n### The backdrop is not completely filled/covered on some Android devices (Galaxy, for one)\n\nReact-Native has a few issues detecting the correct device width/height of some devices.  \nIf you're experiencing this issue, you'll need to install [`react-native-extra-dimensions-android`](https://github.com/Sunhat/react-native-extra-dimensions-android).  \nThen, provide the real window height (obtained from `react-native-extra-dimensions-android`) to the modal:\n\n```javascript\nconst deviceWidth = Dimensions.get(\"window\").width;\nconst deviceHeight = Platform.OS === \"ios\"\n  ? Dimensions.get(\"window\").height\n  : require(\"react-native-extra-dimensions-android\").get(\"REAL_WINDOW_HEIGHT\");\n\nfunction WrapperComponent() {\n  const [isModalVisible, setModalVisible] = useState(true);\n\n  return (\n    <Modal\n      isVisible={isModalVisible}\n      deviceWidth={deviceWidth}\n      deviceHeight={deviceHeight}\n    >\n      <View style={{ flex: 1 }}>\n        <Text>I am the modal content!</Text>\n      </View>\n    </Modal>\n  )\n}\n```\n\n### How can I hide the modal by pressing outside of its content?\n\nThe prop `onBackdropPress` allows you to handle this situation:\n\n```javascript\n<Modal\n  isVisible={isModalVisible}\n  onBackdropPress={() => setModalVisible(false)}>\n  <View style={{flex: 1}}>\n    <Text>I am the modal content!</Text>\n  </View>\n</Modal>\n```\n\n### How can I hide the modal by swiping it?\n\nThe prop `onSwipeComplete` allows you to handle this situation (remember to set `swipeDirection` too!):\n\n```javascript\n<Modal\n  isVisible={isModalVisible}\n  onSwipeComplete={() => setModalVisible(false)}\n  swipeDirection=\"left\">\n  <View style={{flex: 1}}>\n    <Text>I am the modal content!</Text>\n  </View>\n</Modal>\n```\n\nNote that when using `useNativeDriver={true}` the modal won't drag correctly. This is a [known issue](https://github.com/react-native-community/react-native-modal/issues/163#issuecomment-409760695).\n\n### The modal flashes in a weird way when animating\n\nUnfortunately this is a [known issue](https://github.com/react-native-community/react-native-modal/issues/92) that happens when `useNativeDriver=true` and must still be solved.  \nIn the meanwhile as a workaround you can set the `hideModalContentWhileAnimating` prop to `true`: this seems to solve the issue.\nAlso, do not assign a `backgroundColor` property directly to the Modal. Prefer to set it on the child container.\n\n### The modal background doesn't animate properly\n\nAre you sure you named the `isVisible` prop correctly? Make sure it is spelled correctly: `isVisible`, not `visible`.\n\n### The modal doesn't change orientation\n\nAdd a `supportedOrientations={['portrait', 'landscape']}` prop to the component, as described [in the React Native documentation](https://reactnative.dev/docs/modal.html#supportedorientations).\n\nAlso, if you're providing the `deviceHeight` and `deviceWidth` props you'll have to manually update them when the layout changes.\n\n### I can't show multiple modals one after another\n\nUnfortunately right now react-native doesn't allow multiple modals to be displayed at the same time.\nThis means that, in `react-native-modal`, if you want to immediately show a new modal after closing one you must first make sure that the modal that your closing has completed its hiding animation by using the `onModalHide` prop.\n\n### I can't show multiple modals at the same time\n\nSee the question above.\nShowing multiple modals (or even alerts/dialogs) at the same time is not doable because of a react-native bug.\nThat said, I would strongly advice against using multiple modals at the same time because, most often than not, this leads to a bad UX, especially on mobile (just my opinion).\n\n### The StatusBar style changes when the modal shows up\n\nThis issue has been discussed [here](https://github.com/react-native-community/react-native-modal/issues/50).  \nThe TLDR is: it's a know React-Native issue with the Modal component ðŸ˜ž\n\n### The modal is not covering the entire screen\n\nThe modal style applied by default has a small margin.  \nIf you want the modal to cover the entire screen you can easily override it this way:\n\n```js\n<Modal style={{margin: 0}}>...</Modal>\n```\n\n### I can't scroll my ScrollView inside of the modal\n\nEnable propagateSwipe to allow your child components to receive swipe events:\n\n```js\n<Modal propagateSwipe>...</Modal>\n```\n\nPlease notice that this is still a WIP fix and might not fix your issue yet, see [issue #236](https://github.com/react-native-community/react-native-modal/issues/236).\n\n### The modal enter/exit animation flickers\n\nMake sure your `animationIn` and `animationOut` are set correctly.  \nWe noticed that, for example, using `fadeIn` as an exit animation makes the modal flicker (it should be `fadeOut`!).\nAlso, some users have noticed that setting backdropTransitionOutTiming={0} can fix the flicker without affecting the animation.\n\n### The custom backdrop doesn't fill the entire screen\n\nYou need to specify the size of your custom backdrop component. You can also make it expand to fill the entire screen by adding a `flex: 1` to its style:\n\n```javascript\n<Modal\n  isVisible={isModalVisible}\n  customBackdrop={<View style={{flex: 1}} />}>\n  <View style={{flex: 1}}>\n    <Text>I am the modal content!</Text>\n  </View>\n</Modal>\n```\n\n### The custom backdrop doesn't dismiss the modal on press\n\nYou can provide an event handler to the custom backdrop element to dismiss the modal. The prop `onBackdropPress` is not supported for a custom backdrop.\n\n```javascript\n<Modal\n  isVisible={isModalVisible}\n  customBackdrop={\n    <TouchableWithoutFeedback onPress={dismissModalHandler}>\n      <View style={{flex: 1}} />\n    </TouchableWithoutFeedback>\n  }\n/>\n```\n\n## Available animations\n\nTake a look at [react-native-animatable](https://github.com/oblador/react-native-animatable) to see the dozens of animations available out-of-the-box. You can also pass in custom animation definitions and have them automatically register with react-native-animatable. For more information on creating custom animations, see the react-native-animatable [animation definition schema](https://github.com/oblador/react-native-animatable#animation-definition-schema).\n\n## Acknowledgements\n\nThanks [@oblador](https://github.com/oblador) for react-native-animatable, [@brentvatne](https://github.com/brentvatne) for the npm namespace and to anyone who contributed to this library!\n\nPull requests, feedbacks and suggestions are welcome!\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 React Native Community\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-native-modal/-/react-native-modal-11.7.0.tgz#6637d757eeac6eda85f7017a9dfdee0c0fe3a34c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-native-modal/-/react-native-modal-11.7.0.tgz",
    "hash": "6637d757eeac6eda85f7017a9dfdee0c0fe3a34c",
    "integrity": "sha512-0AeAugUrn12DaJK+k2XGmt8ZIUyWgl1nRdipfwHZDnzFSM8g1oqpf7rHxjOqhimHtmzSj4xJ//ZOn1DWe9aC5Q==",
    "registry": "npm",
    "packageName": "react-native-modal",
    "cacheIntegrity": "sha512-0AeAugUrn12DaJK+k2XGmt8ZIUyWgl1nRdipfwHZDnzFSM8g1oqpf7rHxjOqhimHtmzSj4xJ//ZOn1DWe9aC5Q== sha1-ZjfXV+6sbtqF9wF6nf3uDA/jo0w="
  },
  "registry": "npm",
  "hash": "6637d757eeac6eda85f7017a9dfdee0c0fe3a34c"
}