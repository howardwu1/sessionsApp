{
  "manifest": {
    "name": "getenv",
    "description": "Get and typecast environment variables.",
    "author": {
      "name": "Christoph Tavan",
      "email": "dev@tavan.de"
    },
    "contributors": [
      {
        "name": "Moritz von Hase"
      },
      {
        "name": "Jonas Dohse",
        "email": "jonas@dohse.ch"
      },
      {
        "name": "Jan Lehnardt"
      },
      {
        "name": "Tim Ruffles",
        "email": "timruffles@gmail.com"
      },
      {
        "name": "Ashwani Agarwal",
        "email": "ashwani.a@outlook.com"
      }
    ],
    "version": "1.0.0",
    "license": "MIT",
    "homepage": "https://github.com/ctavan/node-getenv",
    "repository": {
      "type": "git",
      "url": "git://github.com/ctavan/node-getenv.git"
    },
    "main": "index.js",
    "scripts": {
      "prettier": "prettier --write *.{js,md} **/*.js",
      "test": "bash -ec 'for F in test/*.js; do echo \"$F\": ; node $F; done;'"
    },
    "engines": {
      "node": ">=6"
    },
    "dependencies": {},
    "devDependencies": {
      "prettier": "^1.18.2"
    },
    "keywords": [
      "env",
      "environment",
      "config",
      "configuration",
      "12factor"
    ],
    "_registry": "npm",
    "_loc": "/home/howard/.cache/yarn/v6/npm-getenv-1.0.0-874f2e7544fbca53c7a4738f37de8605c3fcfc31-integrity/node_modules/getenv/package.json",
    "readmeFilename": "README.md",
    "readme": "# getenv\n\n[![Build Status](https://secure.travis-ci.org/ctavan/node-getenv.png)](http://travis-ci.org/ctavan/node-getenv)\n\nHelper to get and typecast environment variables. This is especially useful if you are building [Twelve-Factor-Apps](http://www.12factor.net/) where all configuration is stored in the environment.\n\n## Installation\n\n```\nnpm install getenv\n```\n\nTypeScript types are available from the `@types/getenv` module.\n\n## Usage\n\nSet environment variables:\n\n```bash\nexport HTTP_HOST=\"localhost\"\nexport HTTP_PORT=8080\nexport HTTP_START=true\nexport AB_TEST_RATIO=0.5\nexport KEYWORDS=\"sports,business\"\nexport PRIMES=\"2,3,5,7\"\n```\n\nGet and use them:\n\n```javascript\nconst getenv = require('getenv');\n\nconst host = getenv('HTTP_HOST'); // same as getenv.string('HTTP_HOST');\nconst port = getenv.int('HTTP_PORT');\nconst start = getenv.bool('HTTP_START');\n\nif (start === true) {\n  // const server = http.createServer();\n  // server.listen(port, host);\n}\n\nconst abTestRatio = getenv.float('AB_TEST_RATIO');\n\nif (Math.random() < abTestRatio) {\n  // test A\n} else {\n  // test B\n}\n\nconst keywords = getenv.array('KEYWORDS');\nkeywords.forEach(function(keyword) {\n  // console.log(keyword);\n});\n\nconst primes = getenv.array('PRIMES', 'int');\nprimes.forEach(function(prime) {\n  // console.log(prime, typeof prime);\n});\n```\n\n## Methods\n\nAll methods accept a fallback value that will be returned if the requested environment variable is not set. If the fallback value is omitted and if the requested environment variable does not exist, an exception is thrown.\n\n### env(name, [fallback])\n\nAlias for `env.string(name, [fallback])`.\n\n### env.string(name, [fallback])\n\nReturn as string.\n\n### env.int(name, [fallback])\n\nReturn as integer number.\n\n### env.float(name, [fallback])\n\nReturn as float number.\n\n### env.bool(name, [fallback])\n\nReturn as boolean. Only allows true/false as valid values.\n\n### env.boolish(name, [fallback])\n\nReturn as boolean. Allows true/false/1/0 as valid values.\n\n### env.array(name, [type], [fallback])\n\nSplit value of the environment variable at each comma and return the resulting array where each value has been typecast according to the `type` parameter. An array can be provided as `fallback`.\n\n### env.multi({spec})\n\nReturn a list of environment variables based on a `spec`:\n\n```javascript\nconst config = getenv.multi({\n  foo: 'FOO', // throws if FOO doesn't exist\n  bar: ['BAR', 'defaultval'], // set a default value\n  baz: ['BAZ', 'defaultval', 'string'], // parse into type\n  quux: ['QUUX', undefined, 'int'], // parse & throw\n});\n```\n\n### env.url(name, [fallback])\n\nReturn a parsed URL as per Node's `require(\"url\").parse`. N.B `url` doesn't validate URLs, so be sure it includes a protocol or you'll get deeply weird results.\n\n```javascript\nconst serviceUrl = getenv.url('SERVICE_URL');\n\nserviceUrl.port; // parsed port number\n```\n\n### env.disableFallbacks()\n\nDisallows fallbacks in environments where you don't want to rely on brittle development defaults (e.g production, integration testing). For example, to disable fallbacks if we indicate production via `NODE_ENV`:\n\n```javascript\nif (process.env.NODE_ENV === 'production') {\n  getenv.disableFallbacks();\n}\n```\n\n### env.disableErrors()\n\n`getenv` won't throw any error. If a fallback value is provided, that will be returned, else `undefined` is returned.\n\n```javascript\ngetenv.disableErrors();\nconsole.log(getenv('RANDOM'));\n// undefined\n```\n\n### env.enableErrors()\n\nRevert the effect of `disableErrors()`.\n\n```javascript\ngetenv.disableErrors();\nconsole.log(getenv('RANDOM'));\n// undefined\n\ngetenv.enableErrors();\nconsole.log(getenv('RANDOM'));\n// Error: GetEnv.Nonexistent: RANDOM does not exist and no fallback value provided.\n```\n\n## Changelog\n\n### v1.0.0\n\n- Drop support for Node.js older than 6.\n- Modernize code.\n- Add MIT License in package.json and LICENSE.md.\n\n### v0.7.0\n\n- Add env.disableErrors() / getenv.enableErrors() support.\n\n### v0.6.0\n\n- Added getenv.boolish() support.\n\n### v0.5.0\n\n- Add getenv.url() support.\n\n### v0.4.0\n\n- Add getenv.disableFallbacks() support.\n\n### v0.3.0\n\n- Add getenv.multi() support.\n\n### v0.2.0\n\n- Rename git repository\n\n### v0.1.0\n\n- Initial release\n\n## Authors\n\n- Moritz von Hase (initial author)\n- Christoph Tavan <dev@tavan.de>\n- Jonas Dohse <jonas@dohse.ch>\n- Jan Lehnardt (@janl): `getenv.multi()` support.\n- Tim Ruffles <timruffles@gmail.com>: `disableFallbacks()`, `url()`\n- Ashwani Agarwal <ashwani.a@outlook.com>: `disableErrors()`, `enableErrors()`\n\n## License\n\nThis module is licensed under the MIT license.\n",
    "licenseText": "The MIT License (MIT)\nCopyright (c) 2012-2019 Christoph Tavan <dev@tavan.de>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/getenv/-/getenv-1.0.0.tgz#874f2e7544fbca53c7a4738f37de8605c3fcfc31",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/getenv/-/getenv-1.0.0.tgz",
    "hash": "874f2e7544fbca53c7a4738f37de8605c3fcfc31",
    "integrity": "sha512-7yetJWqbS9sbn0vIfliPsFgoXMKn/YMF+Wuiog97x+urnSRRRZ7xB+uVkwGKzRgq9CDFfMQnE9ruL5DHv9c6Xg==",
    "registry": "npm",
    "packageName": "getenv",
    "cacheIntegrity": "sha512-7yetJWqbS9sbn0vIfliPsFgoXMKn/YMF+Wuiog97x+urnSRRRZ7xB+uVkwGKzRgq9CDFfMQnE9ruL5DHv9c6Xg== sha1-h08udUT7ylPHpHOPN96GBcP8/DE="
  },
  "registry": "npm",
  "hash": "874f2e7544fbca53c7a4738f37de8605c3fcfc31"
}