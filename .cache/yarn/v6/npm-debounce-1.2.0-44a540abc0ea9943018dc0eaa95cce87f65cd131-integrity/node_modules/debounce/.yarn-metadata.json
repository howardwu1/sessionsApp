{
  "manifest": {
    "name": "debounce",
    "description": "Creates and returns a new debounced version of the passed function that will postpone its execution until after wait milliseconds have elapsed since the last time it was invoked",
    "version": "1.2.0",
    "repository": {
      "type": "git",
      "url": "git://github.com/component/debounce"
    },
    "main": "index.js",
    "scripts": {
      "test": "minijasminenode test.js"
    },
    "license": "MIT",
    "keywords": [
      "function",
      "throttle",
      "invoke"
    ],
    "devDependencies": {
      "minijasminenode": "^1.1.1",
      "sinon": "^1.17.7",
      "mocha": "*",
      "should": "*"
    },
    "component": {
      "scripts": {
        "debounce/index.js": "index.js"
      }
    },
    "_registry": "npm",
    "_loc": "/home/howard/.cache/yarn/v6/npm-debounce-1.2.0-44a540abc0ea9943018dc0eaa95cce87f65cd131-integrity/node_modules/debounce/package.json",
    "readmeFilename": "Readme.md",
    "readme": "\n# debounce\n\n  Useful for implementing behavior that should only happen after a repeated\n  action has completed.\n\n## Installation\n\n    $ component install component/debounce\n\n  Or in node:\n\n    $ npm install debounce\n\n## Example\n\n```js\nvar debounce = require('debounce');\nwindow.onresize = debounce(resize, 200);\n\nfunction resize(e) {\n  console.log('height', window.innerHeight);\n  console.log('width', window.innerWidth);\n}\n```\n\nTo later clear the timer and cancel currently scheduled executions:\n```\nwindow.onresize.clear();\n```\n\nTo execute any pending invocations and reset the timer:\n```\nwindow.onresize.flush();\n```\n\nAlternately, if using newer syntax:\n\n```js\nimport { debounce } from \"debounce\";\n```\n\n## API\n\n### debounce(fn, wait, [ immediate || false ])\n\n  Creates and returns a new debounced version of the passed function that\n  will postpone its execution until after wait milliseconds have elapsed\n  since the last time it was invoked.\n\n  Pass `true` for the `immediate` parameter to cause debounce to trigger\n  the function on the leading edge instead of the trailing edge of the wait\n  interval. Useful in circumstances like preventing accidental double-clicks\n  on a \"submit\" button from firing a second time.\n\n  The debounced function returned has a property 'clear' that is a \n  function that will clear any scheduled future executions of your function.\n\n  The debounced function returned has a property 'flush' that is a \n  function that will immediately execute the function if and only if execution is scheduled,\n  and reset the execution timer for subsequent invocations of the debounced\n  function.\n\n## License\n\n  MIT\n\n  Original implementation is from [`underscore.js`](http://underscorejs.org/)\n  which also has an MIT license.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/debounce/-/debounce-1.2.0.tgz#44a540abc0ea9943018dc0eaa95cce87f65cd131",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/debounce/-/debounce-1.2.0.tgz",
    "hash": "44a540abc0ea9943018dc0eaa95cce87f65cd131",
    "integrity": "sha512-mYtLl1xfZLi1m4RtQYlZgJUNQjl4ZxVnHzIR8nLLgi4q1YT8o/WM+MK/f8yfcc9s5Ir5zRaPZyZU6xs1Syoocg==",
    "registry": "npm",
    "packageName": "debounce",
    "cacheIntegrity": "sha512-mYtLl1xfZLi1m4RtQYlZgJUNQjl4ZxVnHzIR8nLLgi4q1YT8o/WM+MK/f8yfcc9s5Ir5zRaPZyZU6xs1Syoocg== sha1-RKVAq8DqmUMBjcDqqVzOh/Zc0TE="
  },
  "registry": "npm",
  "hash": "44a540abc0ea9943018dc0eaa95cce87f65cd131"
}