{
  "manifest": {
    "name": "errorhandler",
    "description": "Development-only error handler middleware",
    "version": "1.5.1",
    "contributors": [
      {
        "name": "Douglas Christopher Wilson",
        "email": "doug@somethingdoug.com"
      },
      {
        "name": "Jonathan Ong",
        "email": "me@jongleberry.com",
        "url": "http://jongleberry.com"
      }
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/expressjs/errorhandler.git"
    },
    "dependencies": {
      "accepts": "~1.3.7",
      "escape-html": "~1.0.3"
    },
    "devDependencies": {
      "after": "0.8.2",
      "eslint": "5.16.0",
      "eslint-config-standard": "12.0.0",
      "eslint-plugin-import": "2.17.2",
      "eslint-plugin-markdown": "1.0.0",
      "eslint-plugin-node": "8.0.1",
      "eslint-plugin-promise": "4.1.1",
      "eslint-plugin-standard": "4.0.0",
      "istanbul": "0.4.5",
      "mocha": "6.1.4",
      "supertest": "4.0.2"
    },
    "files": [
      "public/",
      "LICENSE",
      "HISTORY.md",
      "index.js"
    ],
    "engines": {
      "node": ">= 0.8"
    },
    "scripts": {
      "lint": "eslint --plugin markdown --ext js,md .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
      "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
    },
    "_registry": "npm",
    "_loc": "/home/howard/.cache/yarn/v6/npm-errorhandler-1.5.1-b9ba5d17cf90744cd1e851357a6e75bf806a9a91-integrity/node_modules/errorhandler/package.json",
    "readmeFilename": "README.md",
    "readme": "# errorhandler\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nDevelopment-only error handler middleware.\n\nThis middleware is only intended to be used in a development environment, as\nthe _full error stack traces and internal details of any object passed to this\nmodule_ will be sent back to the client when an error occurs.\n\nWhen an object is provided to Express as an error, this module will display\nas much about this object as possible, and will do so by using content negotiation\nfor the response between HTML, JSON, and plain text.\n\n  * When the object is a standard `Error` object, the string provided by the\n    `stack` property will be returned in HTML/text responses.\n  * When the object is a non-`Error` object, the result of\n    [util.inspect](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n    will be returned in HTML/text responses.\n  * For JSON responses, the result will be an object with all enumerable properties\n    from the object in the response.\n\n## Install\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install errorhandler\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar errorhandler = require('errorhandler')\n```\n\n### errorhandler(options)\n\nCreate new middleware to handle errors and respond with content negotiation.\n\n#### Options\n\nError handler accepts these properties in the options object.\n\n##### log\n\nProvide a function to be called with the error and a string representation of\nthe error. Can be used to write the error to any desired location, or set to\n`false` to only send the error back in the response. Called as\n`log(err, str, req, res)` where `err` is the `Error` object, `str` is a string\nrepresentation of the error, `req` is the request object and `res` is the\nresponse object (note, this function is invoked _after_ the response has been\nwritten).\n\nThe default value for this option is `true` unless `process.env.NODE_ENV === 'test'`.\n\nPossible values:\n\n  * `true`: Log errors using `console.error(str)`.\n  * `false`: Only send the error back in the response.\n  * A function: pass the error to a function for handling.\n\n## Examples\n\n### Simple example\n\nBasic example of adding this middleware as the error handler only in development\nwith `connect` (`express` also can be used in this example).\n\n```js\nvar connect = require('connect')\nvar errorhandler = require('errorhandler')\n\nvar app = connect()\n\nif (process.env.NODE_ENV === 'development') {\n  // only use in development\n  app.use(errorhandler())\n}\n```\n\n### Custom output location\n\nSometimes you may want to output the errors to a different location than STDERR\nduring development, like a system notification, for example.\n\n<!-- eslint-disable handle-callback-err -->\n\n```js\nvar connect = require('connect')\nvar errorhandler = require('errorhandler')\nvar notifier = require('node-notifier')\n\nvar app = connect()\n\nif (process.env.NODE_ENV === 'development') {\n  // only use in development\n  app.use(errorhandler({ log: errorNotification }))\n}\n\nfunction errorNotification (err, str, req) {\n  var title = 'Error in ' + req.method + ' ' + req.url\n\n  notifier.notify({\n    title: title,\n    message: str\n  })\n}\n```\n\n## License\n\n[MIT](LICENSE)\n\n[coveralls-image]: https://badgen.net/coveralls/c/github/expressjs/errorhandler/master\n[coveralls-url]: https://coveralls.io/r/expressjs/errorhandler?branch=master\n[npm-downloads-image]: https://badgen.net/npm/dm/errorhandler\n[npm-url]: https://npmjs.org/package/errorhandler\n[npm-version-image]: https://badgen.net/npm/v/errorhandler\n[travis-image]: https://badgen.net/travis/expressjs/errorhandler/master\n[travis-url]: https://travis-ci.org/expressjs/errorhandler\n",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2014 Jonathan Ong <me@jongleberry.com>\nCopyright (c) 2014-2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/errorhandler/-/errorhandler-1.5.1.tgz#b9ba5d17cf90744cd1e851357a6e75bf806a9a91",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/errorhandler/-/errorhandler-1.5.1.tgz",
    "hash": "b9ba5d17cf90744cd1e851357a6e75bf806a9a91",
    "integrity": "sha512-rcOwbfvP1WTViVoUjcfZicVzjhjTuhSMntHh6mW3IrEiyE6mJyXvsToJUJGlGlw/2xU9P5whlWNGlIDVeCiT4A==",
    "registry": "npm",
    "packageName": "errorhandler",
    "cacheIntegrity": "sha512-rcOwbfvP1WTViVoUjcfZicVzjhjTuhSMntHh6mW3IrEiyE6mJyXvsToJUJGlGlw/2xU9P5whlWNGlIDVeCiT4A== sha1-ubpdF8+QdEzR6FE1em51v4BqmpE="
  },
  "registry": "npm",
  "hash": "b9ba5d17cf90744cd1e851357a6e75bf806a9a91"
}