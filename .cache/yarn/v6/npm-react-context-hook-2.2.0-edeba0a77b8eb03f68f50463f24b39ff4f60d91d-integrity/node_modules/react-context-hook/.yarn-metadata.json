{
  "manifest": {
    "name": "react-context-hook",
    "version": "2.2.0",
    "description": "A React.js global state manager with Hooks and Context API",
    "author": {
      "name": "Spyna",
      "url": "https://github.com/Spyna"
    },
    "keyword": [
      "react",
      "state",
      "store",
      "reactjs",
      "hooks",
      "contextApi"
    ],
    "homepage": "https://spyna.github.io/react-context-hook/",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/Spyna/react-context-hook.git"
    },
    "main": "dist/index.js",
    "module": "dist/index.es.js",
    "unpkg": "dist/react-context-hook.js",
    "jsnext:main": "dist/index.es.js",
    "files": [
      "dist"
    ],
    "engines": {
      "node": ">=8",
      "npm": ">=5"
    },
    "scripts": {
      "test": "cross-env CI=1 react-scripts test --env=jsdom",
      "test:watch": "react-scripts test --env=jsdom",
      "build": "rollup -c && yarn docs:buildmd",
      "start": "rollup -c -w",
      "prepare": "yarn prettier && yarn run build",
      "predeploy": "yarn docs:build && cd example && yarn install && CI=true yarn test && yarn run build && cd .. && cp -r docs example/build",
      "deploy": "gh-pages -d example/build --message \"[skip ci] Updates\"",
      "release": "standard-version",
      "prettier": "prettier --write 'src/**/*.js' 'example/**/*.css' 'example/**/*.html' 'example/src/**/*.js'",
      "docs:build": "documentation build src/** -f html -o docs",
      "docs:buildmd": "documentation build src/** -f md -o DOCS.md"
    },
    "peerDependencies": {
      "react": "^16.8.6",
      "react-dom": "^16.8.6"
    },
    "devDependencies": {
      "@babel/core": "^7.0.0",
      "@babel/plugin-external-helpers": "^7.0.0",
      "@babel/plugin-proposal-class-properties": "^7.0.0",
      "@babel/plugin-proposal-decorators": "^7.0.0",
      "@babel/plugin-proposal-do-expressions": "^7.0.0",
      "@babel/plugin-proposal-export-default-from": "^7.0.0",
      "@babel/plugin-proposal-export-namespace-from": "^7.0.0",
      "@babel/plugin-proposal-function-bind": "^7.0.0",
      "@babel/plugin-proposal-function-sent": "^7.0.0",
      "@babel/plugin-proposal-json-strings": "^7.0.0",
      "@babel/plugin-proposal-logical-assignment-operators": "^7.0.0",
      "@babel/plugin-proposal-nullish-coalescing-operator": "^7.0.0",
      "@babel/plugin-proposal-numeric-separator": "^7.0.0",
      "@babel/plugin-proposal-optional-chaining": "^7.0.0",
      "@babel/plugin-proposal-pipeline-operator": "^7.0.0",
      "@babel/plugin-proposal-throw-expressions": "^7.0.0",
      "@babel/plugin-syntax-dynamic-import": "^7.0.0",
      "@babel/plugin-syntax-import-meta": "^7.0.0",
      "@babel/preset-env": "^7.0.0",
      "@babel/preset-react": "^7.0.0",
      "@commitlint/cli": "8.3.3",
      "@commitlint/config-conventional": "8.3.3",
      "babel-eslint": "^10.0.1",
      "cross-env": "^5.2.0",
      "documentation": "^12.1.2",
      "eslint": "6.1.0",
      "eslint-config-standard": "^11.0.0",
      "eslint-config-standard-react": "^6.0.0",
      "eslint-plugin-import": "^2.13.0",
      "eslint-plugin-node": "^7.0.1",
      "eslint-plugin-promise": "^4.0.0",
      "eslint-plugin-react": "^7.10.0",
      "eslint-plugin-standard": "^3.1.0",
      "gh-pages": "^2.0.1",
      "husky": "^3.0.9",
      "prettier": "^2.0.2",
      "react": "^16.8.6",
      "react-dom": "16.8.6",
      "react-scripts": "^3.0.1",
      "rollup": "^1.1.2",
      "rollup-plugin-babel": "^4.3.2",
      "rollup-plugin-commonjs": "^9.2.0",
      "rollup-plugin-node-resolve": "^4.0.0",
      "rollup-plugin-peer-deps-external": "^2.2.0",
      "rollup-plugin-url": "^2.1.0",
      "standard-version": "^7.0.0"
    },
    "config": {
      "commitizen": {
        "path": "cz-conventional-changelog"
      }
    },
    "husky": {
      "hooks": {
        "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
      }
    },
    "jest": {
      "coverageReporters": [
        "json",
        "lcov",
        "text"
      ],
      "coverageThreshold": {
        "global": {
          "branches": 90,
          "functions": 90,
          "lines": 90,
          "statements": 90
        }
      }
    },
    "dependencies": {
      "redux": "^4.0.5"
    },
    "_registry": "npm",
    "_loc": "/home/howard/.cache/yarn/v6/npm-react-context-hook-2.2.0-edeba0a77b8eb03f68f50463f24b39ff4f60d91d-integrity/node_modules/react-context-hook/package.json",
    "readmeFilename": "README.md",
    "readme": "# react-context-hook\n\n> A React.js global state manager with Hooks and Context API\n\n[![NPM](https://img.shields.io/npm/v/react-context-hook.svg)](https://www.npmjs.com/package/react-context-hook) \n[![Bundlephobia](https://badgen.net/bundlephobia/minzip/react-context-hook)](https://bundlephobia.com/result?p=react-context-hook)\n\n## Install\n\n```bash\nnpm install --save react-context-hook\n```\n\n## Documentation\n\nRead the documentation of `react-context-hook`: \n\n* [Documentation in HTML format](https://spyna.github.io/react-context-hook/docs/)\n\n* [Documentation in Github MarkDown](./DOCS.md)\n\n## Usage\n\nFirst, wrap your React App in the *Store Provider* using the function `withStore`. \n\n```JS\nimport { withStore} from 'react-context-hook'\n\nexport default withStore(App)\n```\n\nNext use the hook in your Components\n\n```JS\nimport { useStore } from 'react-context-hook'\n\n// const [count, setCount, deleteCount] = useStore('count', 0)\n\nexport default function () {\n  const [count, setCount, deleteCount] = useStore('count', 0)\n  return (\n    <>\n      <button onClick={() => setCount(count - 1)}>Decrement - </button>\n      <span className=\"count\">{count}</span>\n      <button onClick={() => setCount(count + 1)}>Increment + </button>\n      <button onClick={() => deleteCount()}>Delete \"count\" from store</button>\n    </>\n  )\n}\n```\n\n### More hooks: \n\n\n * withStore - [docs](./DOCS.md#withStore)\n * useStore - [docs](./DOCS.md#usestore)\n * useStoreState - [docs](./DOCS.md#usestorestate)\n * useSetStoreValue - [docs](./DOCS.md#usesetstorevalue)\n * useDeleteStoreValue - [docs](./DOCS.md#usedeletestorevalue)\n * GetAndSet - [docs](./DOCS.md#useGetAndSet)\n * GetAndDelete - [docs](./DOCS.md#usegetanddelete)\n * SetAndDelete - [docs](./DOCS.md#usesetanddelete)\n * StoreValue - [docs](./DOCS.md#usestorevalue)\n\n### Advanced use of withStore\n\n```JS\nimport { withStore} from 'react-context-hook'\n\nconst initialState = { count: 10 }\n\nconst storeConfig = {\n  listener: (state, key, prevValue, nextValue) => {\n      console.log(`the key \"${key}\" changed in the store`)\n      console.log('the old value is', prevValue)\n      console.log('the current value is', nextValue)\n      console.log('the state is', state)\n  },\n  logging: true //process.env.NODE_ENV !== 'production'\n}\n\nexport default withStore(App, initialState, storeConfig)\n```\n\n`withStore` creates a React *Context.Provider* which wrap your application the value of the Provider is the **store**. The **store** is similar to a [Javascript Map](https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Map) where you can put, read, and delete values by their key. \n\nFor example `store.set('username',  {name: 'spyna', email: 'me@spyna.it'})` will set a `username` key in the store map. Then you can read, modify or delete it from the map using `store.get('username')` or `store.remove('username')`. \n\nThe store is exported as `store` from *react-context-hook*, so you can use it in the Components. \nHowever for convenience, in React Components you can use the hooks exported from *react-context-hook*. \n\n## Using store outside of React components\n\n`react-context-hook` exports a `store` object which can be used outside of React Components, but will affect the global state. This *object* has the following methods: \n\n* reset: a function to reset the store state to the specified value: Eg: `store.reset({initialValue: 0})`. \n\nThis *store* is automatically initialized when you use the `withStore` function (`export default withStore(App)`). This means you can use it **only after** calling that function.\n\n## License\n\nMIT Â© [Spyna](https://github.com/Spyna)\n\n[![Analytics](https://ga-beacon.appspot.com/UA-89584671-2/github/react-context-hook)](https://github.com/igrigorik/ga-beacon)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-context-hook/-/react-context-hook-2.2.0.tgz#edeba0a77b8eb03f68f50463f24b39ff4f60d91d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-context-hook/-/react-context-hook-2.2.0.tgz",
    "hash": "edeba0a77b8eb03f68f50463f24b39ff4f60d91d",
    "integrity": "sha512-8MtdMhEfqmO6lCB53rvKsh19wbce2vDsvrEkCvxH/XtiHss4D+e8ZMMPYF7xLl4ybNd25eEphrJjQyzRLKevtA==",
    "registry": "npm",
    "packageName": "react-context-hook",
    "cacheIntegrity": "sha512-8MtdMhEfqmO6lCB53rvKsh19wbce2vDsvrEkCvxH/XtiHss4D+e8ZMMPYF7xLl4ybNd25eEphrJjQyzRLKevtA== sha1-7eugp3uOsD9o9QRj8ks5/09g2R0="
  },
  "registry": "npm",
  "hash": "edeba0a77b8eb03f68f50463f24b39ff4f60d91d"
}