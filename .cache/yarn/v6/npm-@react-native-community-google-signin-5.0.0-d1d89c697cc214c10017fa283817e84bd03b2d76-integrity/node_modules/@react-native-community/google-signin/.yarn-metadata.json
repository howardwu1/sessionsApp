{
  "manifest": {
    "name": "@react-native-community/google-signin",
    "version": "5.0.0",
    "description": "Google Signin for your react native applications",
    "main": "index.js",
    "author": {
      "name": "devfd",
      "email": "apptailor.co@gmail.com",
      "url": "https://github.com/devfd"
    },
    "contributors": [
      {
        "name": "Johan Ruokangas",
        "url": "https://latehours.net"
      },
      {
        "name": "Vojtech Novak",
        "url": "@vonovak"
      },
      {
        "name": "Andrei Calazans",
        "url": "@Andrei_Calazans"
      }
    ],
    "scripts": {
      "android": "react-native run-android --root example/",
      "ios": "react-native run-ios",
      "start": "node node_modules/react-native/local-cli/cli.js start",
      "test": "echo \"Error: no test specified\" && exit 1",
      "prettier:check": "prettier --list-different '**/*.js' '**/*.md'",
      "prettier:write": "prettier --write '**/*.js' '**/*.md'",
      "lint": "eslint ."
    },
    "keywords": [
      "react-component",
      "react-native",
      "google signin",
      "google login",
      "oauth",
      "oauth2",
      "ios",
      "android"
    ],
    "homepage": "https://github.com/react-native-community/google-signin",
    "repository": {
      "type": "git",
      "url": "https://github.com/react-native-community/google-signin"
    },
    "bugs": {
      "url": "https://github.com/react-native-community/google-signin/issues"
    },
    "peerDependencies": {
      "prop-types": "*",
      "react": "*",
      "react-native": "*"
    },
    "license": "MIT",
    "devDependencies": {
      "@babel/core": "^7.6.2",
      "@babel/runtime": "^7.6.2",
      "@react-native-community/eslint-config": "^0.0.5",
      "babel-jest": "^24.9.0",
      "eslint": "^6.4.0",
      "eslint-plugin-prettier": "^3.1.2",
      "jest": "^24.9.0",
      "metro-react-native-babel-preset": "^0.56.0",
      "prettier": "1.14.2",
      "react": "16.9.0",
      "react-native": "0.61.1",
      "react-test-renderer": "16.9.0"
    },
    "_registry": "npm",
    "_loc": "/home/howard/.cache/yarn/v6/npm-@react-native-community-google-signin-5.0.0-d1d89c697cc214c10017fa283817e84bd03b2d76-integrity/node_modules/@react-native-community/google-signin/package.json",
    "readmeFilename": "README.md",
    "readme": "![React Native Google Sign In](img/header.png)\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/@react-native-community/google-signin\"><img src=\"https://badge.fury.io/js/%40react-native-community%2Fgoogle-signin.svg\" alt=\"NPM Version\"></a>\n</p>\n\n## Features\n\n- Support all 3 types of authentication methods (standard, with server-side validation or with offline access (aka server side access))\n- Promise-based API consistent between Android and iOS\n- Typings for TypeScript and Flow\n- Native signin buttons\n\n## Project setup and initialization\n\nFor RN >= 0.60 please use version 3 installed from `@react-native-community/google-signin`\n\n`yarn add @react-native-community/google-signin`\n\nFor RN <= 0.59 use version 2 installed from `react-native-google-signin`\n\n`yarn add react-native-google-signin`\n\nThen follow the [Android guide](docs/android-guide.md) and [iOS guide](docs/ios-guide.md)\n\n## Public API\n\n### 1. GoogleSignin\n\n```js\nimport {\n  GoogleSignin,\n  GoogleSigninButton,\n  statusCodes,\n} from '@react-native-community/google-signin';\n```\n\n#### `configure(options)`\n\nIt is mandatory to call this method before attempting to call `signIn()` and `signInSilently()`. This method is sync meaning you can call `signIn` / `signInSilently` right after it. In typical scenarios, `configure` needs to be called only once, after your app starts. In the native layer, this is a synchronous call.\n\nExample usage with for default options: you get user email and basic profile info.\n\n```js\nimport { GoogleSignin } from '@react-native-community/google-signin';\n\nGoogleSignin.configure();\n```\n\nExample to access Google Drive both from the mobile application and from the backend server\n\n```js\nGoogleSignin.configure({\n  scopes: ['https://www.googleapis.com/auth/drive.readonly'], // what API you want to access on behalf of the user, default is email and profile\n  webClientId: '<FROM DEVELOPER CONSOLE>', // client ID of type WEB for your server (needed to verify user ID and offline access)\n  offlineAccess: true, // if you want to access Google API on behalf of the user FROM YOUR SERVER\n  hostedDomain: '', // specifies a hosted domain restriction\n  loginHint: '', // [iOS] The user's ID, or email address, to be prefilled in the authentication UI if possible. [See docs here](https://developers.google.com/identity/sign-in/ios/api/interface_g_i_d_sign_in.html#a0a68c7504c31ab0b728432565f6e33fd)\n  forceCodeForRefreshToken: true, // [Android] related to `serverAuthCode`, read the docs link below *.\n  accountName: '', // [Android] specifies an account name on the device that should be used\n  iosClientId: '<FROM DEVELOPER CONSOLE>', // [iOS] optional, if you want to specify the client ID of type iOS (otherwise, it is taken from GoogleService-Info.plist)\n});\n```\n\n\\* [forceCodeForRefreshToken docs](https://developers.google.com/android/reference/com/google/android/gms/auth/api/signin/GoogleSignInOptions.Builder#public-googlesigninoptions.builder-requestserverauthcode-string-serverclientid,-boolean-forcecodeforrefreshtoken)\n\n#### `signIn()`\n\nPrompts a modal to let the user sign in into your application. Resolved promise returns an [`userInfo` object](#3-userinfo). Rejects with error otherwise.\n\n```js\n// import statusCodes along with GoogleSignin\nimport { GoogleSignin, statusCodes } from '@react-native-community/google-signin';\n\n// Somewhere in your code\nsignIn = async () => {\n  try {\n    await GoogleSignin.hasPlayServices();\n    const userInfo = await GoogleSignin.signIn();\n    this.setState({ userInfo });\n  } catch (error) {\n    if (error.code === statusCodes.SIGN_IN_CANCELLED) {\n      // user cancelled the login flow\n    } else if (error.code === statusCodes.IN_PROGRESS) {\n      // operation (e.g. sign in) is in progress already\n    } else if (error.code === statusCodes.PLAY_SERVICES_NOT_AVAILABLE) {\n      // play services not available or outdated\n    } else {\n      // some other error happened\n    }\n  }\n};\n```\n\n#### `signInSilently()`\n\nMay be called eg. in the `componentDidMount` of your main component. This method returns the [current user](#3-userinfo) and rejects with an error otherwise.\n\nTo see how to handle errors read [`signIn()` method](#signin)\n\n```js\ngetCurrentUserInfo = async () => {\n  try {\n    const userInfo = await GoogleSignin.signInSilently();\n    this.setState({ userInfo });\n  } catch (error) {\n    if (error.code === statusCodes.SIGN_IN_REQUIRED) {\n      // user has not signed in yet\n    } else {\n      // some other error\n    }\n  }\n};\n```\n\n#### `isSignedIn()`\n\nThis method may be used to find out whether some user is currently signed in. It returns a promise which resolves with a boolean value (it never rejects). In the native layer, this is a synchronous call. This means that it will resolve even when the device is offline. Note that it may happen that `isSignedIn()` resolves to true and calling `signInSilently()` rejects with an error (eg. due to a network issue).\n\n```js\nisSignedIn = async () => {\n  const isSignedIn = await GoogleSignin.isSignedIn();\n  this.setState({ isLoginScreenPresented: !isSignedIn });\n};\n```\n\n#### `getCurrentUser()`\n\nThis method resolves with `null` or `userInfo` object. The call never rejects and in the native layer, this is a synchronous call. Note that on Android, `accessToken` is always `null` in the response.\n\n```js\ngetCurrentUser = async () => {\n  const currentUser = await GoogleSignin.getCurrentUser();\n  this.setState({ currentUser });\n};\n```\n\n#### `clearCachedAccessToken(accessTokenString)`\n\nThis method only has an effect on Android. You may run into a 401 Unauthorized error when a token is invalid. Call this method to remove the token from local cache and then call `getTokens()` to get fresh tokens. Calling this method on iOS does nothing and always resolves. This is because on iOS, `getTokens()` always returns valid tokens, refreshing them first if they have expired or are about to expire (see [docs](https://developers.google.com/identity/sign-in/ios/reference/Classes/GIDAuthentication#-gettokenswithhandler:)).\n\n#### `getTokens()`\n\nResolves with an object containing `{ idToken: string, accessToken: string, }` or rejects with an error. Note that using `accessToken` is [discouraged](https://developers.google.com/identity/sign-in/android/migration-guide).\n\n#### `signOut()`\n\nRemoves user session from the device.\n\n```js\nsignOut = async () => {\n  try {\n    await GoogleSignin.revokeAccess();\n    await GoogleSignin.signOut();\n    this.setState({ user: null }); // Remember to remove the user from your app's state as well\n  } catch (error) {\n    console.error(error);\n  }\n};\n```\n\n#### `revokeAccess()`\n\nRemoves your application from the user authorized applications.\n\n```js\nrevokeAccess = async () => {\n  try {\n    await GoogleSignin.revokeAccess();\n    console.log('deleted');\n  } catch (error) {\n    console.error(error);\n  }\n};\n```\n\n#### `hasPlayServices(options)`\n\nChecks if device has Google Play Services installed. Always resolves to true on iOS.\n\nPresence of up-to-date Google Play Services is required to show the sign in modal, but it is _not_ required to perform calls to `configure` and `signInSilently`. Therefore, we recommend to call `hasPlayServices` directly before `signIn`.\n\n```js\ntry {\n  await GoogleSignin.hasPlayServices({ showPlayServicesUpdateDialog: true });\n  // google services are available\n} catch (err) {\n  console.error('play services are not available');\n}\n```\n\n`hasPlayServices` accepts one parameter, an object which contains a single key: `showPlayServicesUpdateDialog` (defaults to `true`). When `showPlayServicesUpdateDialog` is set to true the library will prompt the user to take action to solve the issue, as seen in the figure below.\n\nYou may also use this call at any time to find out if Google Play Services are available and react to the result as necessary.\n\n[![prompt install](img/prompt-install.png)](#prompt-install)\n\n#### `statusCodes`\n\nThese are useful when determining which kind of error has occured during sign in process. Import `statusCodes` along with `GoogleSignIn`. Under the hood these constants are derived from native GoogleSignIn error codes and are platform specific. Always prefer to compare `error.code` to `statusCodes.SIGN_IN_CANCELLED` or `statusCodes.IN_PROGRESS` and not relying on raw value of the `error.code`.\n\n| Name                          | Description                                                                                                                                                                                                                                                                                                                                                               |\n| ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `SIGN_IN_CANCELLED`           | When user cancels the sign in flow                                                                                                                                                                                                                                                                                                                                        |\n| `IN_PROGRESS`                 | Trying to invoke another operation (eg. `signInSilently`) when previous one has not yet finished. If you call eg. `signInSilently` twice, 2 calls to `signInSilently` in the native module will be done. The promise from the first call to `signInSilently` will be rejected with this error, and the second will resolve / reject with the result of the native module. |\n| `SIGN_IN_REQUIRED`            | Useful for use with `signInSilently()` - no user has signed in yet                                                                                                                                                                                                                                                                                                        |\n| `PLAY_SERVICES_NOT_AVAILABLE` | Play services are not available or outdated, this can only happen on Android                                                                                                                                                                                                                                                                                              |\n\n[Example how to use `statusCodes`](#signin).\n\n### 2. GoogleSigninButton\n\n![signin button](img/signin-button.png)\n\n```js\nimport { GoogleSignin, GoogleSigninButton } from '@react-native-community/google-signin';\n\nrender() {\n  <GoogleSigninButton\n    style={{ width: 192, height: 48 }}\n    size={GoogleSigninButton.Size.Wide}\n    color={GoogleSigninButton.Color.Dark}\n    onPress={this._signIn}\n    disabled={this.state.isSigninInProgress} />\n}\n```\n\n#### Props\n\n##### `size`\n\nPossible values:\n\n- Size.Icon: display only Google icon. Recommended size of 48 x 48.\n- Size.Standard: icon with 'Sign in'. Recommended size of 230 x 48.\n- Size.Wide: icon with 'Sign in with Google'. Recommended size of 312 x 48.\n\nDefault: `Size.Standard`. Given the `size` prop you pass, we'll automatically apply the recommended size, but you can override it by passing the style prop as in `style={{ width, height }}`.\n\n##### `color`\n\nPossible values:\n\n- Color.Dark: apply a blue background\n- Color.Light: apply a light gray background\n\n##### `disabled`\n\nBoolean. If true, all interactions for the button are disabled.\n\n##### `onPress`\n\nHandler to be called when the user taps the button\n\n##### [Inherited `View` props...](https://facebook.github.io/react-native/docs/view#props)\n\n### 3. `userInfo`\n\nExample `userInfo` which is returned after successful sign in.\n\n```\n{\n  idToken: string,\n  serverAuthCode: string,\n  scopes: Array<string>, // on iOS this is empty array if no additional scopes are defined\n  user: {\n    email: string,\n    id: string,\n    givenName: string,\n    familyName: string,\n    photo: string, // url\n    name: string // full name\n  }\n}\n```\n\n## Want to contribute?\n\nCheck out the [contributor guide](docs/CONTRIBUTING.md)!\n\n## Notes\n\nCalling the methods exposed by this package may involve remote network calls and you should thus take into account that such calls may take a long time to complete (eg. in case of poor network connection).\n\n**idToken Note**: idToken is not null only if you specify a valid `webClientId`. `webClientId` corresponds to your server clientID on the developers console. It **HAS TO BE** of type **WEB**\n\nRead [iOS documentation](https://developers.google.com/identity/sign-in/ios/backend-auth) and [Android documentation](https://developers.google.com/identity/sign-in/android/backend-auth) for more information\n\n**serverAuthCode Note**: serverAuthCode is not null only if you specify a valid `webClientId` and set `offlineAccess` to true. once you get the auth code, you can send it to your backend server and exchange the code for an access token. Only with this freshly acquired token can you access user data.\n\nRead [iOS documentation](https://developers.google.com/identity/sign-in/ios/offline-access) and [Android documentation](https://developers.google.com/identity/sign-in/android/offline-access) for more information.\n\n## Additional scopes\n\nThe default requested scopes are `email` and `profile`.\n\nIf you want to manage other data from your application (for example access user agenda or upload a file to drive) you need to request additional permissions. This can be accomplished by adding the necessary scopes when configuring the GoogleSignin instance.\n\nPlease visit https://developers.google.com/identity/protocols/googlescopes or https://developers.google.com/oauthplayground/ for a list of available scopes.\n\n## Troubleshooting\n\nPlease see the troubleshooting section in the [Android guide](docs/android-guide.md) and [iOS guide](docs/ios-guide.md).\n\n## Licence\n\n(MIT)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Apptailor\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@react-native-community/google-signin/-/google-signin-5.0.0.tgz#d1d89c697cc214c10017fa283817e84bd03b2d76",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@react-native-community/google-signin/-/google-signin-5.0.0.tgz",
    "hash": "d1d89c697cc214c10017fa283817e84bd03b2d76",
    "integrity": "sha512-MvFHImmtlmE1kJZgZ9XaULm/OBuQ/AQWOCPr3NzYTUv2cCqyGwfFrealo5PS/fuL/InCGcfqK1k/1dZ+67Hjmg==",
    "registry": "npm",
    "packageName": "@react-native-community/google-signin",
    "cacheIntegrity": "sha512-MvFHImmtlmE1kJZgZ9XaULm/OBuQ/AQWOCPr3NzYTUv2cCqyGwfFrealo5PS/fuL/InCGcfqK1k/1dZ+67Hjmg== sha1-0dicaXzCFMEAF/ooOBfoS9A7LXY="
  },
  "registry": "npm",
  "hash": "d1d89c697cc214c10017fa283817e84bd03b2d76"
}