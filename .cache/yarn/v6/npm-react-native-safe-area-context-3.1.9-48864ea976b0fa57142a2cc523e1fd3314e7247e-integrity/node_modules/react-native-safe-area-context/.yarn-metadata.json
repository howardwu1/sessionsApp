{
  "manifest": {
    "name": "react-native-safe-area-context",
    "version": "3.1.9",
    "description": "A flexible way to handle safe area, also works on Android and web.",
    "main": "lib/commonjs/index.js",
    "module": "lib/module/index.js",
    "react-native": "src/index.tsx",
    "types": "lib/typescript/src/index.d.ts",
    "sideEffects": false,
    "files": [
      "src",
      "lib",
      "android",
      "ios",
      "*.podspec",
      "react-native.config.js",
      "!**/__tests__",
      "!example"
    ],
    "author": {
      "name": "Janic Duplessis",
      "email": "janicduplessis@gmail.com"
    },
    "contributors": [
      {
        "name": "Evan Bacon",
        "email": "bacon@expo.io",
        "url": "https://github.com/evanbacon"
      }
    ],
    "homepage": "https://github.com/th3rdwave/react-native-safe-area-context#readme",
    "license": "MIT",
    "scripts": {
      "start": "react-native start",
      "test": "yarn validate:prettier && yarn validate:eslint && yarn validate:typescript && yarn validate:jest",
      "validate:eslint": "eslint \"src/**/*.{js,ts,tsx}\" \"example/**/*.{js,ts,tsx}\"",
      "validate:typescript": "tsc --project ./ --noEmit",
      "validate:prettier": "prettier \"src/**/*.{js,ts,tsx}\" \"example/**/*.{js,ts,tsx}\" --check",
      "validate:jest": "jest",
      "prepare": "bob build",
      "example:ios": "cd ./example && react-native run-ios",
      "example:android": "cd ./example && react-native run-android --no-jetifier",
      "example:expo": "expo start --config example/app.json"
    },
    "keywords": [
      "react-native",
      "react native",
      "react-native-web",
      "expo-web",
      "safe area",
      "view"
    ],
    "peerDependencies": {
      "react": "*",
      "react-native": "*"
    },
    "dependencies": {},
    "devDependencies": {
      "@react-native-community/async-storage": "^1.11.0",
      "@react-native-community/bob": "^0.14.5",
      "@react-native-community/eslint-config": "^2.0.0",
      "@react-native-community/masked-view": "^0.1.10",
      "@react-navigation/native": "^5.5.1",
      "@react-navigation/stack": "^5.5.1",
      "@react-navigation/bottom-tabs": "^5.5.2",
      "@types/jest": "^26.0.0",
      "@types/react": "^16.9.35",
      "@types/react-native": "^0.62.13",
      "@types/react-dom": "^16.9.8",
      "@types/react-test-renderer": "^16.9.2",
      "@typescript-eslint/eslint-plugin": "^3.2.0",
      "@typescript-eslint/parser": "^3.2.0",
      "babel-plugin-module-resolver": "^4.0.0",
      "eslint": "7.2.0",
      "eslint-config-prettier": "^6.11.0",
      "eslint-plugin-prettier": "3.1.3",
      "expo": "^37.0.12",
      "expo-cli": "^3.21.5",
      "jest": "^26.0.1",
      "metro-react-native-babel-preset": "^0.59.0",
      "prettier": "^2.0.5",
      "react": "^16.13.1",
      "react-dom": "^16.13.1",
      "react-native": "^0.63.0-rc.0",
      "react-native-web": "^0.12.3",
      "react-navigation": "^4.3.9",
      "react-navigation-stack": "^2.7.0",
      "react-navigation-tabs": "^2.8.13",
      "react-native-safe-area-view": "1.1.1",
      "react-native-gesture-handler": "^1.6.1",
      "react-native-screens": "^2.8.0",
      "react-native-reanimated": "^1.9.0",
      "react-test-renderer": "^16.13.1",
      "typescript": "^3.9.5"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/th3rdwave/react-native-safe-area-context.git"
    },
    "jest": {
      "preset": "react-native",
      "testEnvironment": "node",
      "clearMocks": true,
      "modulePathIgnorePatterns": [
        "<rootDir>/lib/"
      ]
    },
    "@react-native-community/bob": {
      "source": "src",
      "output": "lib",
      "targets": [
        "commonjs",
        "module",
        "typescript"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/howard/.cache/yarn/v6/npm-react-native-safe-area-context-3.1.9-48864ea976b0fa57142a2cc523e1fd3314e7247e-integrity/node_modules/react-native-safe-area-context/package.json",
    "readmeFilename": "README.md",
    "readme": "# react-native-safe-area-context\n\n[![npm](https://img.shields.io/npm/v/react-native-safe-area-context)](https://www.npmjs.com/package/react-native-safe-area-context) ![Supports Android, iOS, web, macOS and Windows](https://img.shields.io/badge/platforms-android%20%7C%20ios%20%7C%20web%20%7C%20macos%20%7C%20windows-lightgrey.svg) ![MIT License](https://img.shields.io/npm/l/react-native-safe-area-context.svg)\n\n[![JavaScript tests](https://github.com/th3rdwave/react-native-safe-area-context/workflows/JavaScript%20tests/badge.svg)](https://github.com/th3rdwave/react-native-safe-area-context/actions?query=workflow%3AJavaScript%20tests) [![iOS build](https://github.com/th3rdwave/react-native-safe-area-context/workflows/iOS%20build/badge.svg)](https://github.com/th3rdwave/react-native-safe-area-context/actions?query=workflow%3AiOS%20build) [![Android build](https://github.com/th3rdwave/react-native-safe-area-context/workflows/Android%20build/badge.svg)](https://github.com/th3rdwave/react-native-safe-area-context/actions?query=workflow%3AAndroid%20build)\n\nA flexible way to handle safe area, also works on Android and Web!\n\n## Getting started\n\n```\nnpm install react-native-safe-area-context\n```\n\nYou then need to link the native parts of the library for the platforms you are using.\n\n#### Linking in React Native >= 0.60\n\nLinking the package is not required anymore with [Autolinking](https://github.com/react-native-community/cli/blob/master/docs/autolinking.md).\n\n- **iOS Platform:**\n\n  `$ npx pod-install`\n\n#### Linking in React Native < 0.60\n\nThe easiest way to link the library is using the CLI tool by running this command from the root of your project:\n\n```\nreact-native link react-native-safe-area-context\n```\n\nIf you can't or don't want to use the CLI tool, you can also manually link the library using the instructions below (click on the arrow to show them):\n\n<details>\n<summary>Manually link the library on iOS</summary>\n\nEither follow the [instructions in the React Native documentation](https://facebook.github.io/react-native/docs/linking-libraries-ios#manual-linking) to manually link the framework or link using [Cocoapods](https://cocoapods.org) by adding this to your `Podfile`:\n\n```ruby\npod 'react-native-safe-area-context', :path => '../node_modules/react-native-safe-area-context'\n```\n\n</details>\n\n<details>\n<summary>Manually link the library on Android</summary>\n\nMake the following changes:\n\n#### `android/settings.gradle`\n\n```groovy\ninclude ':react-native-safe-area-context'\nproject(':react-native-safe-area-context').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-safe-area-context/android')\n```\n\n#### `android/app/build.gradle`\n\n```groovy\ndependencies {\n   ...\n   implementation project(':react-native-safe-area-context')\n}\n```\n\n#### `android/app/src/main/.../MainApplication.java`\n\nOn top, where imports are:\n\n```java\nimport com.th3rdwave.safeareacontext.SafeAreaContextPackage;\n```\n\nAdd the `SafeAreaContextPackage` class to your list of exported packages.\n\n```java\n@Override\nprotected List<ReactPackage> getPackages() {\n    return Arrays.asList(\n            new MainReactPackage(),\n            ...\n            new SafeAreaContextPackage()\n    );\n}\n```\n\n</details>\n\n## Usage\n\nThis library has 2 important concepts, if you are familiar with React Context this is very similar.\n\n### Providers\n\nThe [SafeAreaProvider](#safeareaprovider) component is a `View` from where insets provided by [Consumers](#consumers) are relative to. This means that if this view overlaps with any system elements (status bar, notches, etc.) these values will be provided to descendent consumers. Usually you will have one provider at the top of your app.\n\n### Consumers\n\nConsumers are components and hooks that allow using inset values provided by the nearest parent [Provider](#providers). Values are always relative to a provider and not to these components.\n\n- [SafeAreaView](#safeareaview) is the preferred way to consume insets. This is a regular `View` with insets applied as extra padding or margin. It offers better performance by applying insets natively and avoids flickers that can happen with the other JS based consumers.\n\n- [useSafeAreaInsets](#usesafeareainsets) offers more flexibility, but can cause some layout flicker in certain cases. Use this if you need more control over how insets are applied.\n\n## API\n\n### SafeAreaProvider\n\nYou should add `SafeAreaProvider` in your app root component. You may need to add it in other places like the root of modals and routes when using `react-native-screen`.\n\nNote that providers should not be inside a `View` that is animated with `Animated` or inside a `ScrollView` since it can cause very frequent updates.\n\n#### Example\n\n```js\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nfunction App() {\n  return <SafeAreaProvider>...</SafeAreaProvider>;\n}\n```\n\n#### Props\n\nAccepts all [View](https://reactnative.dev/docs/view#props) props. Has a default style of `{flex: 1}`.\n\n##### `initialMetrics`\n\nOptional, defaults to `null`.\n\nCan be used to provide the initial value for frame and insets, this allows rendering immediatly. See [optimization](#optimization) for more information on how to use this prop.\n\n### SafeAreaView\n\n`SafeAreaView` is a regular `View` component with the safe area insets applied as padding or margin.\n\nPadding or margin styles are added to the insets, for example `style={{paddingTop: 10}}` on a `SafeAreaView` that has insets of 20 will result in a top padding of 30.\n\n#### Example\n\n```js\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nfunction SomeComponent() {\n  return (\n    <SafeAreaView style={{ flex: 1, backgroundColor: 'red' }}>\n      <View style={{ flex: 1, backgroundColor: 'blue' }} />\n    </SafeAreaView>\n  );\n}\n```\n\n#### Props\n\nAccepts all [View](https://reactnative.dev/docs/view#props) props.\n\n##### `edges`\n\nOptional, array of `top`, `right`, `bottom`, and `left`. Defaults to all.\n\nSets the edges to apply the safe area insets to.\n\nFor example if you don't want insets to apply to the top edge because the view does not touch the top of the screen you can use:\n\n```js\n<SafeAreaView edges={['right', 'bottom', 'left']} />\n```\n\n##### `mode`\n\nOptional, `padding` (default) or `margin`.\n\nApply the safe area to either the padding or the margin.\n\nThis can be useful for example to create a safe area aware separator component:\n\n```js\n<SafeAreaView mode=\"margin\" style={{ height: 1, backgroundColor: '#eee' }} />\n```\n\n### useSafeAreaInsets\n\nReturns the safe area insets of the nearest provider. This allows manipulating the inset values from JavaScript. Note that insets are not updated synchronously so it might cause a slight delay for example when rotating the screen.\n\nObject with `{ top: number, right: number, bottom: number, left: number }`.\n\n```js\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nfunction HookComponent() {\n  const insets = useSafeAreaInsets();\n\n  return <View style={{ paddingBottom: Math.max(insets.bottom, 16) }} />;\n}\n```\n\n### useSafeAreaFrame\n\nReturns the frame of the nearest provider. This can be used as an alternative to the `Dimensions` module.\n\nObject with `{ x: number, y: number, width: number, height: number }`\n\n### `SafeAreaInsetsContext`\n\nReact Context with the value of the safe area insets.\n\nCan be used with class components:\n\n```js\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nclass ClassComponent extends React.Component {\n  render() {\n    return (\n      <SafeAreaInsetsContext.Consumer>\n        {(insets) => <View style={{ paddingTop: insets.top }} />}\n      </SafeAreaInsetsContext.Consumer>\n    );\n  }\n}\n```\n\n### `withSafeAreaInsets`\n\nHigher order component that provides safe area insets as the `insets` prop.\n\n### `SafeAreaFrameContext`\n\nReact Context with the value of the safe area frame.\n\n### `initialWindowMetrics`\n\nInsets and frame of the window on initial render. This can be used with the `initialMetrics` from `SafeAreaProvider`. See [optimization](#optimization) for more information.\n\nObject with:\n\n```ts\n{\n  frame: { x: number, y: number, width: number, height: number },\n  insets: { top: number, left: number, right: number, bottom: number },\n}\n```\n\n## Deprecated apis\n\n### useSafeArea\n\nUse `useSafeAreaInsets` intead.\n\n### SafeAreaConsumer\n\nUse `SafeAreaInsetsContext.Consumer` instead.\n\n### SafeAreaContext\n\nUse `SafeAreaInsetsContext` instead.\n\n### initialWindowSafeAreaInsets\n\nUse `initialWindowMetrics` instead.\n\n## Web SSR\n\nIf you are doing server side rendering on the web you can use `initialMetrics` to inject insets and frame value based on the device the user has, or simply pass zero values. Since insets measurement is async it will break rendering your page content otherwise.\n\n## Optimization\n\nIf you can, use `SafeAreaView`. It's implemented natively so when rotating the device, there is no delay from the asynchronous bridge.\n\nTo speed up the initial render, you can import `initialWindowMetrics` from this package and set as the `initialMetrics` prop on the provider as described in Web SSR. You cannot do this if your provider remounts, or you are using `react-native-navigation`.\n\n```js\nimport {\n  SafeAreaProvider,\n  initialWindowMetrics,\n} from 'react-native-safe-area-context';\n\nfunction App() {\n  return (\n    <SafeAreaProvider initialMetrics={initialWindowMetrics}>\n      ...\n    </SafeAreaProvider>\n  );\n}\n```\n\n## Testing\n\nWhen testing components nested under `SafeAreaProvider`, ensure to pass `initialMetrics` to\nprovide mock data for frame and insets and ensure the provider renders its children.\n\n```js\nexport function TestSafeAreaProvider({ children }) {\n  return (\n    <SafeAreaProvider\n      initialMetrics={{\n        frame: { x: 0, y: 0, width: 0, height: 0 },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }}\n    >\n      {children}\n    </SafeAreaProvider>\n  );\n}\n```\n\n## Contributing\n\nSee the [Contributing Guide](CONTRIBUTING.md)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 Th3rd Wave\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-native-safe-area-context/-/react-native-safe-area-context-3.1.9.tgz#48864ea976b0fa57142a2cc523e1fd3314e7247e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-native-safe-area-context/-/react-native-safe-area-context-3.1.9.tgz",
    "hash": "48864ea976b0fa57142a2cc523e1fd3314e7247e",
    "integrity": "sha512-wmcGbdyE/vBSL5IjDPReoJUEqxkZsywZw5gPwsVUV1NBpw5eTIdnL6Y0uNKHE25Z661moxPHQz6kwAkYQyorxA==",
    "registry": "npm",
    "packageName": "react-native-safe-area-context",
    "cacheIntegrity": "sha512-wmcGbdyE/vBSL5IjDPReoJUEqxkZsywZw5gPwsVUV1NBpw5eTIdnL6Y0uNKHE25Z661moxPHQz6kwAkYQyorxA== sha1-SIZOqXaw+lcUKizFI+H9MxTnJH4="
  },
  "registry": "npm",
  "hash": "48864ea976b0fa57142a2cc523e1fd3314e7247e"
}